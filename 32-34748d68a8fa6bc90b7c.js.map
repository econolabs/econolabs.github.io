{"version":3,"sources":["webpack:///./src/components/HTMLEditorClassicLazy.js"],"names":["HTMLEditorBallonBlockLazy","props","dispatch","useDispatch","initContent","useSelector","selectCKEditorData","ckeditor_node_content","editor","ClassicEditor","data","onInit","onChange","event","setCKEditorContent","getData","onFocus"],"mappings":"8FAAA,0IAUe,SAASA,EAA0BC,GAC9C,IAAMC,EAAWC,cACXC,EAAcC,YAAYC,KAAoBC,sBAEpD,OAAO,kBAAC,IAAD,CACKC,OAAQC,IAERC,KAAQN,GAA2B,qBAEnCO,OAAQ,SAAAH,KAIRI,SAAU,SAACC,EAAOL,GAEdN,EAASY,YAAmBN,EAAOO,aAMvCC,QAAS,SAACH,EAAOL","file":"32-34748d68a8fa6bc90b7c.js","sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\"; \n\n//import { selectTempData, setCKEditorContent } from \"../features/temp/tempSlice\";\nimport { selectCKEditorData, setCKEditorContent } from \"../features/ckeditor/ckeditorSlice\"; //, setCKEditorNodeId\n\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n//import BalloonEditor from '@ckeditor/ckeditor5-build-balloon-block';\n\nexport default function HTMLEditorBallonBlockLazy(props) {\n    const dispatch = useDispatch();\n    const initContent = useSelector(selectCKEditorData).ckeditor_node_content;\n\n    return <CKEditor\n                editor={ClassicEditor}\n\n                data={!!initContent ? initContent :\"<p>Комментарий</p>\"}\n     //           data={!!props.htmlfeedback ? props.htmlfeedback :\"<p>Комментарий</p>\"}\n                onInit={editor => {\n                    // You can store the \"editor\" and use when it is needed.\n                   // console.log('Editor is ready to use!', editor);\n                }}\n                onChange={(event, editor) => {\n                //    const data = editor.getData();\n                    dispatch(setCKEditorContent(editor.getData()));\n                 //   console.log({ event, editor, data });\n                }}\n                // onBlur={(event, editor) => {\n                //     props.setHtmlfeedback(editor.getData());\n                // }}\n                onFocus={(event, editor) => {\n             //       console.log('Focus.', editor);\n                }}\n            />\n           \n}\n\n"],"sourceRoot":""}