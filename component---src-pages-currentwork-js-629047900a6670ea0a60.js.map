{"version":3,"sources":["webpack:///./src/pages/currentwork.js"],"names":["currentDay","Intl","DateTimeFormat","weekday","year","month","day","format","Date","replace","Currentwork","useFirebaseNode","usersQuizes","data","loading","error","Object","keys","map","item","console","log","sort","a","b","timeA","timestamp","timeB","uniqueUsers","Set","user","usersProgress","doneTasks","filter","quiz","userquiz","title","length","uniqueTitles","titleIndex","key","className","Header","Body","quizWithTitle","quizIndex","avatarUrl","src","alt","data-toggle","data-placement","style","verticalAlign","width","height","borderRadius","objectFit","email"],"mappings":"4OAWIA,EAAa,IAAIC,KAAKC,eAAe,KAAM,CAC3CC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,YACNC,OAAO,IAAIC,MAAQC,QAAQ,gBAAiB,KAUhC,SAASC,IACpB,MAA8CC,YAAgB,cAAgBX,EAAa,WAA7EY,EAAd,EAAQC,KAAmBC,EAA3B,EAA2BA,QAASC,EAApC,EAAoCA,MAEpC,GAAMD,IAAYF,EAAe,OAAO,kBAAC,IAAD,KAAQ,qCAChD,GAAMG,EAAS,OAAO,kBAAC,IAAD,YAEtB,IAAIF,EAAOG,OAAOC,KAAKL,GAAaM,KAAI,SAAAC,GAAU,OAAOP,EAAYO,MACrEC,QAAQC,IAAIR,GAEZA,EAAKS,MAAK,SAAUC,EAAGC,GACnB,IAAIC,EAAUF,WAAGG,UAAYH,EAAEG,UAAY,EACvCC,EAAUH,WAAGE,UAAYF,EAAEE,UAAY,EAC3C,OAAID,EAAQE,GACA,EAERF,EAAQE,EACD,EAEJ,KAGXP,QAAQC,IAAIR,GAEZ,IAAIe,EAAgBf,EAAF,YAAa,IAAIgB,IAAIhB,EAAKK,KAAI,SAAAC,GAAI,OAAIA,EAAKW,UAAU,GACvEV,QAAQC,IAAIO,GACZ,IAAIG,EAAgBH,EAAYV,KAAI,SAAAY,GAChC,MAAO,CAAEA,KAAMA,EAAME,UAAW,YAAI,IAAIH,IAAIhB,EAAKoB,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,OAASA,KAAMZ,KAAI,SAAAiB,GAAQ,OAAIA,EAASC,WAASC,WAE1HjB,QAAQC,IAAIU,GAGZ,IAAMO,EAAiBzB,EAAF,YAAa,IAAIgB,IAAIhB,EAAKK,KAAI,SAAAC,GAAI,OAAIA,EAAKiB,WAAW,GAE3E,OAAO,kBAAC,IAAD,KACFE,EAAapB,KAAI,SAACkB,EAAOG,GAAR,OACd,kBAAC,IAAD,CAAMC,IAAKD,EAAYE,UAAU,OAC7B,kBAAC,IAAKC,OAAN,KAAcN,GACd,kBAAC,IAAKO,KAAN,KACK9B,EAAKoB,QAAO,SAAAC,GAAI,OAAIA,EAAKE,QAAUA,KAAOlB,KAAI,SAAC0B,EAAeC,GAAhB,OAC3C,0BAAML,IAAKK,GACJD,WAAeE,UACd,yBACIC,IAAKH,EAAcE,UAAWE,IAAI,GAClCP,UAAU,MACVQ,cAAY,UACZC,iBAAe,SACfd,MAASQ,WAAed,KAAOc,EAAcd,KAAO,YAAcC,EAAcE,QAAO,SAAAd,GAAI,OAAIA,EAAKW,OAASc,EAAcd,QAAM,GAAGE,UAAY,SAAW,GAC3JmB,MAAO,CACHC,cAAe,SACfC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdtB,OAAQ,kBACRuB,UAAW,WAGnB,0BAAMP,cAAY,UACdC,iBAAe,SACfd,MAASQ,WAAed,KAAOc,EAAcd,KAAO,YAAcC,EAAcE,QAAO,SAAAd,GAAI,OAAIA,EAAKW,OAASc,EAAcd,QAAM,GAAGE,UAAY,SAAW,IAC3J,kBAAC,IAAD,CAAYyB,MAAOb,aAAF,EAAEA,EAAea","file":"component---src-pages-currentwork-js-629047900a6670ea0a60.js","sourcesContent":["import React from \"react\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\n\nimport UserAvatar from \"../mediatemplates/UserAvatar\"\n\nimport Card from 'react-bootstrap/Card'\n\nimport Layout from \"../components/layout\"\n\n// let showDate = new Date(2021, 4, 22); //// the month is 0-indexed\n\nlet currentDay = new Intl.DateTimeFormat(\"en\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\"\n}).format(new Date()).replace(/[^a-zA-Z0-9]/g, \"_\");\n\n// let currentDay = new Intl.DateTimeFormat(\"en\", {\n//     weekday: \"short\",\n//     year: \"numeric\",\n//     month: \"short\",\n//     day: \"numeric\"\n// }).format(new Date(2021, 5, 16)).replace(/[^a-zA-Z0-9]/g, \"_\"); \n// the month is 0-indexed\n\nexport default function Currentwork() {\n    const { data: usersQuizes, loading, error } = useFirebaseNode('currentDay/' + currentDay + '/posts/');\n\n    if (!!loading || !usersQuizes) { return <Layout><div>...</div></Layout> }\n    if (!!error) { return <Layout>:-(</Layout> }\n\n    let data = Object.keys(usersQuizes).map(item => { return usersQuizes[item] });\n    console.log(data);\n\n    data.sort(function (a, b) {\n        var timeA = !!a?.timestamp ? a.timestamp : 0;\n        var timeB = !!b?.timestamp ? b.timestamp : 0;\n        if (timeA > timeB) {\n            return -1;\n        }\n        if (timeA < timeB) {\n            return 1;\n        }\n        return 0;\n    });\n\n    console.log(data);\n\n    let uniqueUsers = !!data ? [...new Set(data.map(item => item.user))] : []; // [ 'A', 'B']\n    console.log(uniqueUsers);\n    let usersProgress = uniqueUsers.map(user => {\n        return { user: user, doneTasks: [...new Set(data.filter(quiz => quiz.user === user).map(userquiz => userquiz.title))].length }\n    });\n    console.log(usersProgress);\n\n\n    const uniqueTitles = !!data ? [...new Set(data.map(item => item.title))] : []; // [ 'A', 'B']\n\n    return <Layout>\n        {uniqueTitles.map((title, titleIndex) =>\n            <Card key={titleIndex} className=\"m-3\">\n                <Card.Header>{title}</Card.Header>\n                <Card.Body>\n                    {data.filter(quiz => quiz.title === title).map((quizWithTitle, quizIndex) =>\n                        <span key={quizIndex}>\n                            {!!quizWithTitle?.avatarUrl ?\n                                <img\n                                    src={quizWithTitle.avatarUrl} alt=\"\"\n                                    className=\"m-3\"\n                                    data-toggle=\"tooltip\"\n                                    data-placement=\"bottom\"\n                                    title={!!quizWithTitle?.user ? quizWithTitle.user + ' Сегодня ' + usersProgress.filter(item => item.user === quizWithTitle.user)[0].doneTasks + ' задач' : ''}\n                                    style={{\n                                        verticalAlign: 'middle',\n                                        width: '60px',\n                                        height: '60px',\n                                        borderRadius: '50%',\n                                        filter: 'grayscale(100%)',\n                                        objectFit: 'cover'\n                                    }} />\n                                :\n                                <span data-toggle=\"tooltip\"\n                                    data-placement=\"bottom\"\n                                    title={!!quizWithTitle?.user ? quizWithTitle.user + ' Сегодня ' + usersProgress.filter(item => item.user === quizWithTitle.user)[0].doneTasks + ' задач' : ''}>\n                                    <UserAvatar email={quizWithTitle?.email}/>                                        \n                                </span>\n                            }\n                        </span>)}\n                </Card.Body>\n            </Card>\n        )}\n    </Layout>\n}"],"sourceRoot":""}