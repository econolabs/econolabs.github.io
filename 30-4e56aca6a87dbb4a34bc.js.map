{"version":3,"sources":["webpack:///./src/mediatemplates/lazy/ApexEmptyOptionsChartLazy.js","webpack:///./node_modules/react-apexcharts/dist/react-apexcharts.min.js"],"names":["ApexEmptyOptionsChartLazy","props","showAs","DateTimeBarApexChart","DateTimeLineApexChart","DataLineBrightColors","ArrayCategoriesLineApexChart","ArrayCategoriesBarApexChart","DateTimeAreaApexChart","ScatterApexChart","makeCategories","categories","map","item","includes","split","month","day","year","Date","days","now","console","log","series","name","data","defaultBrightColorsLineApexCharts","chart","type","toolbar","show","title","text","align","style","fontFamily","fontWeight","marginTop","stroke","curve","xaxis","Array","index","d","setMonth","getMonth","color","fontSize","cssClass","margin","padding","tooltip","x","format","markers","size","colors","strokeColors","strokeWidth","hover","yaxis","tickAmount","labels","formatter","val","parseFloat","toFixed","options","updatedOptions","className","chartTitle","xaxisTitle","yaxisTitle","defaultDateTimeBarApexChartOptions","plotOptions","bar","horizontal","columnWidth","dataLabels","enabled","width","fill","opacity","y","chartOptions","defaultDateTimeLineApexChartOptions","defaultArrayCategoriesLineApexChartOptions","defaultArrayCategoriesBarApexChartOptions","defaultDateTimeAreaApexChartOptions","zoom","autoScaleYaxis","gradient","shadeIntensity","opacityFrom","opacityTo","stops","seriesWithNames","defaultScatterApexChartOptions","scatterSeries","Object","defineProperty","exports","value","_typeof","Symbol","iterator","e","constructor","prototype","_extends","assign","t","arguments","length","r","n","hasOwnProperty","call","_createClass","enumerable","configurable","writable","key","_apexcharts2","_interopRequireDefault","_react","_react2","_propTypes2","__esModule","default","window","ApexCharts","Charts","TypeError","_classCallCheck","this","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","createRef","chartRef","setRef","create","setPrototypeOf","_inherits","Component","indexOf","_objectWithoutProperties","createElement","ref","current","getConfig","render","height","o","i","a","extend","isArray","isObject","keys","forEach","_defineProperty","JSON","stringify","s","c","u","updateOptions","updateSeries","destroy","propTypes","string","isRequired","any","array","object","defaultProps"],"mappings":"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","file":"30-4e56aca6a87dbb4a34bc.js","sourcesContent":["import React from \"react\";\nimport Chart from \"react-apexcharts\";\n\nimport Container from \"react-bootstrap/Container\";\n\nexport default function ApexEmptyOptionsChartLazy(props) {\n\n\n\n  if (props?.showAs === \"datalinebarapexchart\" || props?.showAs === \"datetimebarapexchart\") {\n    //    return <DatalineBarApexChartLazy {...props} />;\n    return <DateTimeBarApexChart {...props} />;\n  }\n  if (props?.showAs === \"datetimelineapexchart\") {\n    //  return <DataLineBrightColorsLazy {...props} />;\n    // console.log(props);\n    return <DateTimeLineApexChart {...props} />;\n  }\n\n  if (props?.showAs === \"datalinebrightcolor\") {\n    //  return <DataLineBrightColorsLazy {...props} />;\n    // console.log(props);\n    return <DataLineBrightColors {...props} />;\n  }\n\n\n\n  if (props?.showAs === \"lineapexchart\" || props?.showAs === \"arraycategorieslineapexchart\") {\n    // return <LineApexChartLazy {...props} />;\n    return <ArrayCategoriesLineApexChart {...props} />;\n  }\n  if (props?.showAs === \"apexbarchartsgrouped\" || props?.showAs === \"arraycategoriesbarapexchart\") {\n    return <ArrayCategoriesBarApexChart {...props} />;\n  }\n\n\n  if (props?.showAs === \"datalinequotesapexchart\" || props?.showAs === \"datetimeareanocategoriesapexchart\") {\n    // return <DatalineQuotesApexChartLazy {...props} />;\n    return <DateTimeAreaApexChart {...props} />;\n  }\n\n  if (props?.showAs === \"scatterquotesapexchart\" || props?.showAs === \"scatterapexchart\") {\n    return <ScatterApexChart {...props} />;\n  }\n\n  return null;\n}\n\nfunction makeCategories(categories) {\n  let newCategories = categories.map(item => {\n    if (item > 1000000) return item\n    if (item.includes(\"/\")) {\n      let [month, day, year] = item.split('/'); //\"8/1/2020\"\n      //    console.log(month, day, year);\n      return +new Date(+year, +month - 1, +day + 1);\n    }\n    if (item.includes(\"+\")) {\n      let [, days] = item.split('+'); // \"TODAY()+8\"\n      return +new Date() + 1000 * 60 * 60 * 24 * (+days);\n    }\n    if (item.includes(\"-\")) {\n      let [, days] = item.split('-'); // \"TODAY()-8\"\n      return +new Date() + 1000 * 60 * 60 * 24 * (-days);\n    }\n    return +Date.now()\n  }\n  )\n//  console.log(newCategories);\n  return newCategories\n}\n\nfunction DataLineBrightColors(props) {\n  console.log(props);\n\n  let series = !!props?.series\n    ? props.series\n    : [\n      { name: \"Компания A\", data: [100, 1500, 1150, 3000] },\n      { name: \"Компания Б\", data: [1000, 900, 1460, 1300] },\n      { name: \"Компания В\", data: [1000, 1300, 1250, 1550] },\n      { name: \"Индекс\", data: [1000, 1400, 1200, 1600] },\n    ];\n\n  let defaultBrightColorsLineApexCharts = {\n    chart: {\n      type: \"line\",\n      toolbar: {\n        show: false,\n      },\n    },\n    title: {\n      text: \"\",\n      align: \"left\",\n      style: {\n        // color: \"gray\",\n        // fontSize: '1rem',\n        fontFamily: \"Helvetica, Arial, sans-serif\",\n        fontWeight: \"normal\",\n        marginTop: \"2rem\",\n        // cssClass: 'apexcharts-title',\n      },\n    },\n    stroke: {\n      //        width: 7,\n      curve: \"smooth\",\n    },\n    xaxis: {\n      type: \"datetime\",\n      categories: !!props?.categories\n        ? props.categories\n        : [...new Array(5)].map((item, index) => {\n          var d = new Date();\n          return d.setMonth(d.getMonth() - 14 + index);\n        }),\n      title: {\n        text: \"\",\n        style: {\n          color: \"gray\",\n          fontSize: \"1rem\",\n          fontFamily: \"Helvetica, Arial, sans-serif\",\n          fontWeight: 200,\n          cssClass: \"apexcharts-xaxis-title\",\n          margin: \"1rem\",\n          padding: \"1rem\",\n        },\n      },\n      style: {\n        color: \"gray\",\n        fontSize: \"1rem\",\n        fontFamily: \"Helvetica, Arial, sans-serif\",\n        fontWeight: 200,\n        cssClass: \"apexcharts-yaxis-title\",\n        margin: \"1rem\",\n      },\n    },\n    tooltip: {\n      x: {\n        format: \"dd MMM yyyy\",\n      },\n    },\n    markers: {\n      size: 2,\n      colors: [\"#D3D3D3\"],\n      strokeColors: \"#808080\",\n      strokeWidth: 2,\n      hover: {\n        size: 4,\n      },\n    },\n    yaxis: {\n      // min: 800,\n      // max: 1800,\n      title: {\n        text: \"\",\n        style: {\n          color: \"gray\",\n          fontSize: \"1rem\",\n          fontFamily: \"Helvetica, Arial, sans-serif\",\n          fontWeight: 200,\n          cssClass: \"apexcharts-yaxis-title\",\n        },\n      },\n      tickAmount: 5,\n      labels: {\n        formatter: function (val) {\n          return parseFloat(val).toFixed(1);\n        },\n      },\n    },\n  };\n\n  let options = (() => {\n    if (!!props?.options) {\n      let updatedOptions = { ...defaultBrightColorsLineApexCharts };\n      updatedOptions = { ...updatedOptions, ...props.options };\n      updatedOptions.xaxis.categories = props.categories;\n      return updatedOptions;\n    }\n    return defaultBrightColorsLineApexCharts;\n  })();\n\n  return (\n    <Container className=\"mt-3\">\n      <Chart options={options} series={series} categories={props.categories} />\n    </Container>\n  );\n}\n\nfunction DateTimeBarApexChart(\n  {\n    series = [\n      { name: \"Компания A\", data: [100, 1500, 1150, 3000] },\n      { name: \"Компания Б\", data: [1000, 900, 1460, 1300] },\n      { name: \"Компания В\", data: [1000, 1300, 1250, 1550] },\n      { name: \"Индекс\", data: [1000, 1400, 1200, 1600] },\n    ],\n    categories = [...new Array(4)].map((item, index) => { var d = new Date(); return d.setMonth(d.getMonth() - 4 + index) }),\n    chartTitle = \"Динамика\",\n    xaxisTitle = \"\",\n    yaxisTitle = \"Значение\",\n    options\n  }) {\n\n  const defaultDateTimeBarApexChartOptions = {\n    chart: { type: 'bar', toolbar: { show: false } },\n    title: { text: chartTitle, align: \"left\", style: { fontFamily: \"Helvetica, Arial, sans-serif\", marginTop: \"2rem\", fontWeight: 'normal' } },\n    plotOptions: { bar: { horizontal: false, columnWidth: '55%' } }, // columnWidth: '55%', endingShape: 'rounded'\n    dataLabels: { enabled: false },\n    stroke: { show: true, width: 1, colors: ['transparent'] },\n    xaxis: {\n      type: \"datetime\", categories: makeCategories(categories),\n      title: { text: xaxisTitle, style: { fontFamily: \"Helvetica, Arial, sans-serif\", margin: \"1rem\", padding: \"1rem\", fontWeight: 'normal' } }\n    },\n    yaxis: { title: { text: yaxisTitle }, style: { fontSize: '1rem', fontFamily: 'Helvetica, Arial, sans-serif', fontWeight: 'normal', cssClass: 'apexcharts-yaxis-title' } },\n    fill: { opacity: 1 },\n    tooltip: {\n      x: { format: \"MMM yy\" }, //'20' + 'yy'\n      y: { formatter: function (val) { return val } }\n    },\n  }\n\n  let chartOptions = (() => {\n    if (!!options) {\n      let updatedOptions = { ...defaultDateTimeBarApexChartOptions, ...options };\n      return updatedOptions;\n    }\n    return defaultDateTimeBarApexChartOptions;\n  })();\n\n  return (\n    <Container className=\"mt-3\">\n      <Chart options={chartOptions} series={series} categories={makeCategories(categories)} type=\"bar\" />\n    </Container>\n  );\n}\n\nfunction DateTimeLineApexChart(\n  {\n    series = [\n      { name: \"Компания A\", data: [100, 1500, 1150, 3000] },\n      { name: \"Компания Б\", data: [1000, 900, 1460, 1300] },\n      { name: \"Компания В\", data: [1000, 1300, 1250, 1550] },\n      { name: \"Индекс\", data: [1000, 1400, 1200, 1600] },\n    ],\n    categories = [...new Array(4)].map((item, index) => { var d = new Date(); return d.setMonth(d.getMonth() - 4 + index) }),\n    chartTitle = \"Динамика\",\n    xaxisTitle = \"\",\n    yaxisTitle = \"Значение\",\n    options\n  }\n) {\n\n  let defaultDateTimeLineApexChartOptions = {\n    chart: { type: \"line\", toolbar: { show: false } },\n    title: { text: chartTitle, align: \"left\", style: { fontFamily: \"Helvetica, Arial, sans-serif\", marginTop: \"2rem\", fontWeight: 'normal' } },\n    stroke: { curve: \"smooth\" },\n    xaxis: {\n      type: \"datetime\",\n      categories: makeCategories(categories),\n      title: { text: xaxisTitle, style: { fontFamily: \"Helvetica, Arial, sans-serif\", margin: \"1rem\", padding: \"1rem\", fontWeight: 'normal' } },\n      tooltip: { x: { format: \"dd MMM yyyy\" } }\n    },\n    markers: { size: 2, colors: [\"#D3D3D3\"], strokeColors: \"#808080\", strokeWidth: 2, hover: { size: 4 } },\n    yaxis: {\n      title: {\n        text: yaxisTitle,\n        style: { fontSize: '1rem', fontFamily: 'Helvetica, Arial, sans-serif', fontWeight: 'normal', cssClass: 'apexcharts-yaxis-title' }\n      },\n      tickAmount: 5,\n      labels: { formatter: function (val) { return parseFloat(val).toFixed(1) } },\n      // min: 800, max: 1800,\n    },\n  };\n\n  let chartOptions = (() => {\n    if (!!options) {\n      let updatedOptions = { ...defaultDateTimeLineApexChartOptions, ...options };\n      updatedOptions.xaxis.categories = makeCategories(categories);\n      return updatedOptions;\n    }\n    return defaultDateTimeLineApexChartOptions;\n  })();\n\n  return (\n    <Container className=\"mt-3\">\n      <Chart options={chartOptions} series={series} categories={makeCategories(categories)} />\n    </Container>\n  );\n}\n\nfunction ArrayCategoriesLineApexChart({\n  series = [\n    { name: \"Компания A\", data: [100, 1500, 1150, 3000] },\n    { name: \"Компания Б\", data: [1000, 900, 1460, 1300] },\n    { name: \"Компания В\", data: [1000, 1300, 1250, 1550] },\n    { name: \"Индекс\", data: [1000, 1400, 1200, 1600] },\n  ],\n  categories = ['1кв. 2022г.', '2кв. 2022г.', '3кв. 2022г.', '4кв. 2022г.'],\n  chartTitle = \"Динамика\",\n  xaxisTitle = \"Кварталы\",\n  yaxisTitle = \"Значение\",\n  options\n}) {\n\n  const defaultArrayCategoriesLineApexChartOptions = {\n    chart: { type: 'line', toolbar: { show: false } },\n    title: { text: chartTitle, align: \"left\", style: { fontFamily: \"Helvetica, Arial, sans-serif\", marginTop: \"2rem\", fontWeight: 'normal' } },\n    // stroke: { width: 7, curve: 'smooth' },\n    dataLabels: { enabled: true },\n    xaxis: {\n      categories: categories,\n      title: { text: xaxisTitle, style: { fontFamily: \"Helvetica, Arial, sans-serif\", margin: \"1rem\", padding: \"1rem\", fontWeight: 'normal', cssClass: 'apexcharts-xaxis-title' } }\n    },\n    markers: { size: 2, colors: [\"#D3D3D3\"], strokeColors: \"#808080\", strokeWidth: 2, hover: { size: 4 } },\n    yaxis: {\n      title: {\n        text: yaxisTitle,\n        style: { fontSize: '1rem', fontFamily: 'Helvetica, Arial, sans-serif', fontWeight: 'normal', cssClass: 'apexcharts-yaxis-title' }\n      },\n      //  tickAmount: 8,\n      labels: { formatter: function (val) { return parseFloat(val).toFixed(1) } }\n      // min: -20,\n      // max: 20,\n    }\n  }\n\n  let chartOptions = (() => {\n    if (!!options) {\n      let updatedOptions = { ...defaultArrayCategoriesLineApexChartOptions, ...options };\n      return updatedOptions;\n    }\n    return defaultArrayCategoriesLineApexChartOptions;\n  })();\n\n  return (\n    <Container className=\"mt-3\">\n      <Chart options={chartOptions} series={series} />\n    </Container>\n  );\n}\n\nfunction ArrayCategoriesBarApexChart({\n  series = [\n    { name: \"Компания A\", data: [100, 1500, 1150, 3000] },\n    { name: \"Компания Б\", data: [1000, 900, 1460, 1300] },\n    { name: \"Компания В\", data: [1000, 1300, 1250, 1550] },\n    { name: \"Индекс\", data: [1000, 1400, 1200, 1600] },\n  ],\n  categories = ['1кв. 2022г.', '2кв. 2022г.', '3кв. 2022г.', '4кв. 2022г.'],\n  chartTitle = \"Динамика\",\n  xaxisTitle = \"Кварталы\",\n  yaxisTitle = \"Значение\",\n  options\n}) {\n  //    console.log(props);\n\n  let defaultArrayCategoriesBarApexChartOptions = {\n    title: { text: chartTitle, align: \"left\", style: { fontFamily: \"Helvetica, Arial, sans-serif\", marginTop: \"2rem\", fontWeight: 'normal' } },\n    xaxis: {\n      categories: categories,\n      title: { text: xaxisTitle, style: { fontFamily: \"Helvetica, Arial, sans-serif\", margin: \"1rem\", padding: \"1rem\", fontWeight: 'normal', cssClass: 'apexcharts-xaxis-title' } }\n    },\n\n    yaxis: {\n      title: {\n        text: yaxisTitle,\n        style: { fontFamily: 'Helvetica, Arial, sans-serif', fontWeight: 'normal', cssClass: 'apexcharts-yaxis-title' } //fontSize: '1rem', \n      }\n    }\n  };\n\n  let chartOptions = (() => {\n    if (!!options) {\n      let updatedOptions = {\n        ...defaultArrayCategoriesBarApexChartOptions,\n        ...options,\n      };\n      return updatedOptions;\n    }\n    return defaultArrayCategoriesBarApexChartOptions;\n  })();\n\n  return (\n    <Container className=\"mt-3\">\n      <Chart\n        options={chartOptions}\n        series={series}\n        type=\"bar\"\n      />\n    </Container>\n  );\n}\n\nfunction DateTimeAreaApexChart({\n  series = [\n    {\n      name: \"dataline1\",\n      data: [\n        ['Dec 23 2017', 100],\n        ['Dec 23 2020', 120],\n      ],\n    },\n    {\n      name: \"dataline2\",\n      data: [\n        ['Dec 23 2017', 150],\n        ['Dec 23 2020', 80],\n      ],\n    },\n  ],\n  chartTitle = \"\",\n  xaxisTitle = \"\",\n  yaxisTitle = \"\",\n  options\n}\n) {\n\n  let defaultDateTimeAreaApexChartOptions = {\n    chart: { type: \"area\", zoom: { autoScaleYaxis: true } },\n    title: { text: chartTitle, align: 'left', style: { fontFamily: 'Helvetica, Arial, sans-serif', fontWeight: 'normal', marginTop: '2rem', cssClass: 'apexcharts-title' } },  //height: 350,\n    dataLabels: { enabled: false },\n    markers: { size: 0, style: \"hollow\" },\n    xaxis: {\n      type: \"datetime\", title: { text: xaxisTitle, style: { fontFamily: 'Helvetica, Arial, sans-serif', fontWeight: 'normal', cssClass: 'apexcharts-xaxis-title' } },\n      //min: new Date('01 Mar 2012').getTime(),\n      // tickAmount: 6,\n    },\n    tooltip: { x: { format: \"dd MMM yyyy\" } },\n    fill: { type: \"gradient\", gradient: { shadeIntensity: 1, opacityFrom: 0.7, opacityTo: 0.9, stops: [0, 100] } },\n    yaxis: {\n      title: {\n        text: yaxisTitle, style: { fontFamily: 'Helvetica, Arial, sans-serif', fontWeight: 200, cssClass: 'apexcharts-yaxis-title' }\n        // min: -20,\n        // max: 20,\n      },\n      labels: {\n        formatter: function (val) {\n          return parseFloat(val).toFixed(1)\n        }\n      }\n    }\n  };\n\n  let chartOptions = (() => {\n    if (!!options) {\n      return {\n        ...defaultDateTimeAreaApexChartOptions,\n        ...options,\n      };\n    }\n    return defaultDateTimeAreaApexChartOptions;\n  })();\n\n  return (\n    <Chart\n      options={chartOptions}\n      series={series}\n      type=\"area\"\n    />\n  );\n}\n\nfunction ScatterApexChart({\n  series,\n  seriesWithNames,\n  chartTitle = \"\",\n  xaxisTitle = \"\",\n  yaxisTitle = \"\",\n  options,\n}) {\n\n  let defaultScatterApexChartOptions = {\n    chart: { type: \"scatter\", zoom: { enabled: true, type: \"xy\" } }, //height: 350,\n    title: { text: chartTitle, align: \"left\", style: { fontFamily: \"Helvetica, Arial, sans-serif\", fontWeight: \"normal\", marginTop: '2rem', cssClass: 'apexcharts-title' } },\n    xaxis: {\n      title: { text: xaxisTitle, style: { fontFamily: \"Helvetica, Arial, sans-serif\", fontWeight: 200, cssClass: \"apexcharts-xaxis-title\" } },\n      tickAmount: 10,\n      labels: { formatter: function (val) { return parseFloat(val).toFixed(1) } },\n    },\n    yaxis: {\n      title: { text: yaxisTitle, style: { fontFamily: \"Helvetica, Arial, sans-serif\", fontWeight: 200, cssClass: \"apexcharts-yaxis-title\" } },\n      tickAmount: 7\n    },\n  };\n\n  //  console.log(props.series);\n  let scatterSeries = (() => {\n    if (!!seriesWithNames) { return seriesWithNames }\n    if (!!series) { return [{ name: \"y\", data: [...series] }] }\n    return [{ name: \"y\", data: [[5, 5], [-5, 5], [-5, -5], [5, -5], [1, 1], [-2, -2]] }];\n  })();\n\n  let chartOptions = (() => {\n    if (!!options) {\n      return {\n        ...defaultScatterApexChartOptions,\n        ...options,\n      };\n    }\n    return defaultScatterApexChartOptions;\n  })();\n\n  return (\n    <Chart\n      options={chartOptions} //\n      series={scatterSeries}\n      type=\"scatter\"\n    />\n  );\n}\n\n\n\n// import React from \"react\";\n// import Chart from \"react-apexcharts\";\n\n// import Container from \"react-bootstrap/Container\";\n\n// export default function ApexEmptyOptionsChartLazy(props) {\n\n\n\n//   if (props?.showAs === \"datalinebarapexchart\") {\n//     return <DatalineBarApexChartLazy {...props} />;\n//   }\n\n//   if (props?.showAs === \"lineapexchart\") {\n//     return <LineApexChartLazy {...props} />;\n//   }\n\n\n//     if (props?.showAs === \"datalinequotesapexchart\") {\n//         return <DatalineQuotesApexChartLazy {...props} />;\n//       }\n\n//   if (props?.showAs === \"datalinebrightcolor\") {\n//     return <DataLineBrightColorsLazy {...props} />;\n//   }\n\n//     if (props?.showAs === \"scatterquotesapexchart\") {\n//     return <ScatterQuotesApexChartOptionsLazy {...props} />;\n//   }\n\n//   if (!props?.showAs || props?.showAs === \"apexbarchartsgrouped\" ) {\n//     return <ApexBarChartsGroupedLazy {...props} />;\n//   }\n\n//   return null;\n// }\n\n// function ApexBarChartsGroupedLazy(props) {\n//   //    console.log(props);\n\n//   let defaultApexBarChartsGroupedOptions = { xaxis: { categories: [] } };\n\n//   let options = (() => {\n//     if (!!props?.options) {\n//       let updatedOptions = {\n//         ...defaultApexBarChartsGroupedOptions,\n//         ...props.options,\n//       };\n//       return updatedOptions;\n//     }\n//     return defaultApexBarChartsGroupedOptions;\n//   })();\n\n//   let categories = (() => {\n//     if (!!props?.categories) {\n//       return props.categories;\n//     }\n//     return [2021, 2022, 2023];\n//   })();\n\n//   options.xaxis.categories = categories;\n\n//   let series = (() => {\n//     if (!!props?.series) {\n//       return props.series;\n//     }\n//     return [\n//       {\n//         name: \"Кэш фло\",\n//         data: [44, 55, 41],\n//       },\n//       {\n//         name: \"Дисконтированный кэш-фло\",\n//         data: [44, 50, 33],\n//       },\n//     ];\n//   })();\n\n//   return (\n//     <Container className=\"mt-3\">\n//       <Chart\n//         options={options}\n//         series={series}\n//         type={props?.type ? props.type : \"line\"}\n//         height={props?.height ? props.height : 290}\n//       />\n//     </Container>\n//   );\n// }\n\n// function ScatterQuotesApexChartOptionsLazy(props) {\n//   const scatterQuotesApexChartOptions = {\n//     chart: {\n//       height: 350,\n//       type: \"scatter\",\n//       zoom: {\n//         enabled: true,\n//         type: \"xy\",\n//       },\n//     },\n//     title: {\n//       text: props?.chartTitle ? props.chartTitle : \"\",\n//       align: \"left\",\n//       style: {\n//         //            color: \"gray\",\n//         //    fontSize: '1rem',\n//         fontFamily: \"Helvetica, Arial, sans-serif\",\n//         fontWeight: \"normal\",\n//         //            marginTop: '2rem'\n//         //         cssClass: 'apexcharts-title',\n//       },\n//     },\n//     xaxis: {\n//       title: {\n//         text: !!props?.xaxisTitle ? props?.xaxisTitle : \"\",\n//         style: {\n//           color: \"gray\",\n//           fontSize: \"1rem\",\n//           fontFamily: \"Helvetica, Arial, sans-serif\",\n//           fontWeight: 200,\n//           cssClass: \"apexcharts-xaxis-title\",\n//         },\n//       },\n//       tickAmount: 10,\n//       labels: {\n//         formatter: function (val) {\n//           return parseFloat(val).toFixed(1);\n//         },\n//       },\n//     },\n//     yaxis: {\n//       title: {\n//         text: !!props?.yaxisTitle ? props.yaxisTitle : \"\",\n//         style: {\n//           color: \"gray\",\n//           fontSize: \"1rem\",\n//           fontFamily: \"Helvetica, Arial, sans-serif\",\n//           fontWeight: 200,\n//           cssClass: \"apexcharts-yaxis-title\",\n//         },\n//       },\n//       tickAmount: 7,\n//       // labels: {\n//       //     formatter: function (val) {\n//       //         return parseFloat(val).toFixed(1)\n//       //     }\n//       // }\n//     },\n//   };\n\n//   //  console.log(props.series);\n//   let series = (() => {\n//     if (!!props?.seriesWithNames) {\n//       return props.seriesWithNames;\n//     }\n//     if (!!props?.series) {\n//       return [{ name: \"y\", data: [...props.series] }];\n//     }\n//     return [\n//       {\n//         name: \"y\",\n//         data: [\n//           [5, 5],\n//           [-5, 5],\n//           [-5, -5],\n//           [5, -5],\n//           [1, 1],\n//           [-2, -2],\n//         ],\n//       },\n//     ];\n//   })();\n\n//   return (\n//     <Chart\n//       options={{ ...scatterQuotesApexChartOptions, ...props?.options }} //\n//       series={series}\n//       type=\"scatter\"\n//       //      height={350}\n//     />\n//   );\n// }\n\n\n\n// function DatalineQuotesApexChartLazy(\n//     props\n//   //   {\n//   //   series = [\n//   //     {\n//   //       name: \"dataline1\",\n//   //       data: [\n//   //         [873057600000, 100],\n//   //         [873057600000, 120],\n//   //       ],\n//   //     },\n//   //     {\n//   //       name: \"dataline2\",\n//   //       data: [\n//   //         [873057600000, 150],\n//   //         [873057600000, 80],\n//   //       ],\n//   //     },\n//   //   ],\n//   //   chartTitle = \"\",\n//   //   xaxisTitle = \"\",\n//   //   yaxisTitle = \"\",\n//   //   options,\n//   // }\n//   ) {\n//     const datalineQuotesApexChartOptions = {\n//       chart: {\n//       //  id: \"area-datetime\",\n//         type: \"area\",\n//         height: 350,\n//         zoom: {\n//           autoScaleYaxis: true,\n//         },\n//       },\n//       title: {\n//         text: !!props?.chartTitle ? props?.chartTitle : '',\n//         align: 'left',\n//         style: {\n//             //            color: \"gray\",\n//             //    fontSize: '1rem',\n//             fontFamily: 'Helvetica, Arial, sans-serif',\n//             fontWeight: 'normal',\n//             //            marginTop: '2rem'\n//             //         cssClass: 'apexcharts-title',\n//         }\n//     },\n//       dataLabels: {\n//         enabled: false,\n//       },\n//       markers: {\n//         size: 0,\n//         style: \"hollow\",\n//       },\n//       xaxis: {\n//         type: \"datetime\",\n//         title: {\n//           text: !!props?.xaxisTitle ? props?.xaxisTitle : '',\n//           style: {\n//           //    color: \"gray\",\n//           //    fontSize: '1rem',\n//               fontFamily: 'Helvetica, Arial, sans-serif',\n//               fontWeight: 'normal',\n//               cssClass: 'apexcharts-xaxis-title',\n//           }\n//       },\n//         //     min: new Date('01 Mar 2012').getTime(),\n//        // tickAmount: 6,\n//       },\n//       tooltip: {\n//         x: {\n//           format: \"dd MMM yyyy\",\n//         },\n//       },\n//       fill: {\n//         type: \"gradient\",\n//         gradient: {\n//           shadeIntensity: 1,\n//           opacityFrom: 0.7,\n//           opacityTo: 0.9,\n//           stops: [0, 100],\n//         },\n//       },\n//       yaxis: {\n//         // min: -20,\n//         // max: 20,\n//         title: {\n//             text: !!props?.yaxisTitle ? props?.yaxisTitle : '', \n//              style: {\n//             //     color: \"gray\",\n//             //     fontSize: '1rem',\n//                  fontFamily: 'Helvetica, Arial, sans-serif',\n//             //     fontWeight: 200,\n//             //     cssClass: 'apexcharts-yaxis-title',\n//              }\n//         },\n//         labels: {\n//             formatter: function (val) {\n//                 return parseFloat(val).toFixed(1)\n//             }\n//         }\n//     }\n//     };\n\n//     let options = !!props?.options ? { ...datalineQuotesApexChartOptions, ...props.options }: datalineQuotesApexChartOptions; \n//     return (\n//       <Chart\n//         options={options}\n//         series={!!props?.series ? props.series: [ \n//               {\n//                 name: \"dataline1\",\n//                 data: [\n//                   [873057600000, 100],\n//                   [873057600000, 120],\n//                 ],\n//               },\n//               {\n//                 name: \"dataline2\",\n//                 data: [\n//                   [873057600000, 150],\n//                   [873057600000, 80],\n//                 ],\n//               },\n//             ]\n//         }\n//       />\n//     );\n//   }\n\n//   function LineApexChartLazy({\n//     series = [{ name: 'Прибыль', data: [-5, -5, -5, -5, 0, 5, 10] }],\n//     categories = [60, 65, 70, 75, 80, 85, 90],\n//     chartTitle = \"Case Позиция покупателя опциона на покупку. Страйк цена 75 руб, премия 5 руб\",\n//     xaxisTitle = \"Курс доллара на дату исполнения опциона\",\n//     yaxisTitle = \"Прибыль\",\n//     options\n//   }) {\n//     const lineApexChartOptions = {\n//       chart: {\n//         type: 'line',\n//         toolbar: {\n//           show: false,\n//         }\n//       },\n//       title: {\n//         text: chartTitle,\n//         align: 'left',\n//         style: {\n//           //            color: \"gray\",\n//           //    fontSize: '1rem',\n//           fontFamily: 'Helvetica, Arial, sans-serif',\n//           fontWeight: 'normal',\n//           //            marginTop: '2rem'\n//           //         cssClass: 'apexcharts-title',\n//         }\n//       },\n//       //     stroke: {\n//       //        width: 7,\n//       //        curve: 'smooth'\n//       //     },\n//       dataLabels: {\n//         enabled: true,\n//       },\n//       xaxis: {\n//         //         type: 'datetime',\n//         categories: [...categories],\n//         title: {\n//           text: xaxisTitle,\n//           style: {\n//             color: \"gray\",\n//             fontSize: '1rem',\n//             fontFamily: 'Helvetica, Arial, sans-serif',\n//             fontWeight: 200,\n//             cssClass: 'apexcharts-xaxis-title',\n//           }\n//         },\n//         style: {\n//           color: \"gray\",\n//           fontSize: '1rem',\n//           fontFamily: 'Helvetica, Arial, sans-serif',\n//           fontWeight: 200,\n//           cssClass: 'apexcharts-yaxis-title',\n//         }\n//       },\n//       // fill: {\n//       //     type: 'gradient',\n//       //     gradient: {\n//       //         shade: 'dark',\n//       //         gradientToColors: ['#FDD835'],\n//       //         shadeIntensity: 1,\n//       //         type: 'horizontal',\n//       //         opacityFrom: 1,\n//       //         opacityTo: 1,\n//       //         stops: [0, 100, 100, 100]\n//       //     },\n//       // },\n//       markers: {\n//         size: 2,\n//         colors: [\"#D3D3D3\"],\n//         strokeColors: \"#808080\",\n//         strokeWidth: 2,\n//         hover: {\n//           size: 4,\n//         }\n//       },\n//       yaxis:\n//       {\n//         // min: -20,\n//         // max: 20,\n//         title: {\n//           text: yaxisTitle,\n//           style: {\n//             color: \"gray\",\n//             fontSize: '1rem',\n//             fontFamily: 'Helvetica, Arial, sans-serif',\n//             fontWeight: 200,\n//             cssClass: 'apexcharts-yaxis-title',\n//           }\n//         },\n//         tickAmount: 8,\n//         labels: {\n//           formatter: function (val) {\n//             return parseFloat(val).toFixed(1)\n//           }\n//         }\n//       }\n//     }\n\n\n//     return (\n//       <Chart\n//         options={{ ...lineApexChartOptions, ...options }}\n//         series={series}\n//       />\n//     );\n//   }\n\n//   function DatalineBarApexChartLazy(props) {\n\n//     const datalineBarApexChartOptions = {\n\n//       chart: {\n//         type: 'bar',\n//         toolbar: { show: false }\n//       },\n//       plotOptions: {\n//         bar: {\n//           horizontal: false,\n//           columnWidth: '55%',\n//   //        endingShape: 'rounded'\n//         },\n//       },\n//       dataLabels: {\n//         enabled: false\n//       },\n//       stroke: {\n//         show: true,\n//         width: 1,\n//         colors: ['transparent']\n//       },\n//       xaxis: {\n//         type: 'datetime',\n//   //      categories: !!props?.categories ? props.categories : [...new Array(10)].map((item, index) => { var d = new Date(); return d.setFullYear(d.getFullYear() + 1 + index) }),\n//         style: {\n//           color: \"gray\",\n//           fontSize: '1rem',\n//           fontFamily: 'Helvetica, Arial, sans-serif',\n//           fontWeight: 200,\n//           cssClass: 'apexcharts-yaxis-title',\n//         }\n//         //   categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'],\n//       },\n//       yaxis: {\n//         title: {\n//           text: 'млн. руб'\n//         }\n//       },\n//       fill: {\n//         opacity: 1\n//       },\n//       tooltip: {\n//         x: {\n//           format: \"MMM 'yyyy\" //'20' + 'yy'\n//         },\n//         y: {\n//           formatter: function (val) {\n//             return \"RUB \" + val + \" млн.\"\n//           }\n//         }\n\n//       },\n//     }\n\n\n\n//     let options = (() => {\n//       if (!!props?.options) {\n//           let updatedOptions = { ...datalineBarApexChartOptions, ...props.options };\n//           return updatedOptions;\n//       };\n//       return datalineBarApexChartOptions\n//   })();\n\n//   let categories = (() => {\n//       if (!!props?.categories) { return props.categories };\n//       return [...new Array(7)].map((item, index) => { var d = new Date(); return d.setFullYear(d.getFullYear() + 0 + index) }) // [2001, 2002, 2003, 2004, 2005, 2006, 2007]\n//   })();\n\n//   options.xaxis.categories = categories;\n\n//   let series = (() => {\n//       if (!!props?.series) { return props.series };\n//       return [{\n//           name: 'Кэш фло',\n//           data: [44, 55, 41, 64, 22, 43, 21],\n//       }, {\n//           name: \"Дисконтированный кэш-фло\",\n//           data: [44, 50, 33, 52, 13, 31, 14]\n//       }];\n//   })();\n\n//     return (\n//       <Chart\n//         options={options}\n//         series={series}\n//         type=\"bar\"\n//       />\n//     );\n//   }\n\n\n\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nvar _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (e) {\n  return typeof e;\n} : function (e) {\n  return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e;\n},\n    _extends = Object.assign || function (e) {\n  for (var t = 1; t < arguments.length; t++) {\n    var r = arguments[t];\n\n    for (var n in r) {\n      Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n    }\n  }\n\n  return e;\n},\n    _createClass = function () {\n  function n(e, t) {\n    for (var r = 0; r < t.length; r++) {\n      var n = t[r];\n      n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);\n    }\n  }\n\n  return function (e, t, r) {\n    return t && n(e.prototype, t), r && n(e, r), e;\n  };\n}(),\n    _apexcharts = require(\"apexcharts/dist/apexcharts.common\"),\n    _apexcharts2 = _interopRequireDefault(_apexcharts),\n    _react = require(\"react\"),\n    _react2 = _interopRequireDefault(_react),\n    _propTypes = require(\"prop-types\"),\n    _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\n\nfunction _defineProperty(e, t, r) {\n  return t in e ? Object.defineProperty(e, t, {\n    value: r,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[t] = r, e;\n}\n\nfunction _objectWithoutProperties(e, t) {\n  var r = {};\n\n  for (var n in e) {\n    0 <= t.indexOf(n) || Object.prototype.hasOwnProperty.call(e, n) && (r[n] = e[n]);\n  }\n\n  return r;\n}\n\nfunction _classCallCheck(e, t) {\n  if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\nfunction _possibleConstructorReturn(e, t) {\n  if (!e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return !t || \"object\" != typeof t && \"function\" != typeof t ? e : t;\n}\n\nfunction _inherits(e, t) {\n  if (\"function\" != typeof t && null !== t) throw new TypeError(\"Super expression must either be null or a function, not \" + typeof t);\n  e.prototype = Object.create(t && t.prototype, {\n    constructor: {\n      value: e,\n      enumerable: !1,\n      writable: !0,\n      configurable: !0\n    }\n  }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);\n}\n\nwindow.ApexCharts = _apexcharts2.default;\n\nvar Charts = function () {\n  function r(e) {\n    _classCallCheck(this, r);\n\n    var t = _possibleConstructorReturn(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this, e));\n\n    return _react2.default.createRef ? t.chartRef = _react2.default.createRef() : t.setRef = function (e) {\n      return t.chartRef = e;\n    }, t.chart = null, t;\n  }\n\n  return _inherits(r, _react.Component), _createClass(r, [{\n    key: \"render\",\n    value: function value() {\n      var e = _objectWithoutProperties(this.props, []);\n\n      return _react2.default.createElement(\"div\", _extends({\n        ref: _react2.default.createRef ? this.chartRef : this.setRef\n      }, e));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function value() {\n      var e = _react2.default.createRef ? this.chartRef.current : this.chartRef;\n      this.chart = new _apexcharts2.default(e, this.getConfig()), this.chart.render();\n    }\n  }, {\n    key: \"getConfig\",\n    value: function value() {\n      var e = this.props,\n          t = e.type,\n          r = e.height,\n          n = e.width,\n          o = e.series,\n          i = e.options,\n          a = {\n        chart: {\n          type: t,\n          height: r,\n          width: n\n        },\n        series: o\n      };\n      return this.extend(i, a);\n    }\n  }, {\n    key: \"isObject\",\n    value: function value(e) {\n      return e && \"object\" === (void 0 === e ? \"undefined\" : _typeof(e)) && !Array.isArray(e) && null != e;\n    }\n  }, {\n    key: \"extend\",\n    value: function value(t, r) {\n      var n = this;\n      \"function\" != typeof Object.assign && (Object.assign = function (e) {\n        if (null == e) throw new TypeError(\"Cannot convert undefined or null to object\");\n\n        for (var t = Object(e), r = 1; r < arguments.length; r++) {\n          var n = arguments[r];\n          if (null != n) for (var o in n) {\n            n.hasOwnProperty(o) && (t[o] = n[o]);\n          }\n        }\n\n        return t;\n      });\n      var o = Object.assign({}, t);\n      return this.isObject(t) && this.isObject(r) && Object.keys(r).forEach(function (e) {\n        n.isObject(r[e]) && e in t ? o[e] = n.extend(t[e], r[e]) : Object.assign(o, _defineProperty({}, e, r[e]));\n      }), o;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function value(e) {\n      if (!this.chart) return null;\n      var t = this.props,\n          r = t.options,\n          n = t.series,\n          o = t.height,\n          i = t.width,\n          a = JSON.stringify(e.options),\n          s = JSON.stringify(e.series),\n          c = JSON.stringify(r),\n          u = JSON.stringify(n);\n      a === c && s === u && o === e.height && i === e.width || (s === u ? this.chart.updateOptions(this.getConfig()) : a === c && o === e.height && i === e.width ? this.chart.updateSeries(n) : this.chart.updateOptions(this.getConfig()));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function value() {\n      this.chart && \"function\" == typeof this.chart.destroy && this.chart.destroy();\n    }\n  }]), r;\n}();\n\n(exports.default = Charts).propTypes = {\n  type: _propTypes2.default.string.isRequired,\n  width: _propTypes2.default.any,\n  height: _propTypes2.default.any,\n  series: _propTypes2.default.array.isRequired,\n  options: _propTypes2.default.object.isRequired\n}, Charts.defaultProps = {\n  type: \"line\",\n  width: \"100%\",\n  height: \"auto\"\n};"],"sourceRoot":""}