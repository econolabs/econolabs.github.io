{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-factor.min.js"],"names":["e","t","s","i","n","r","a","Prism","comment","pattern","lookbehind","inside","greedy","number","regexp","alias","variable","keyword","operator","string","combinators","replace","RegExp","map","join","Object","keys","forEach","languages","factor"],"mappings":"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","file":"119-5d2cd113a27bbf5a12a9.js","sourcesContent":["require(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\n!function (e) {\n  var t = {\n    \"function\": /\\b(?:TODOS?|FIX(?:MES?)?|NOTES?|BUGS?|XX+|HACKS?|WARN(?:ING)?|\\?{2,}|!{2,})\\b/\n  },\n      s = {\n    number: /\\\\[^\\s']|%\\w/\n  },\n      i = {\n    comment: [{\n      pattern: /(^|\\s)(?:! .*|!$)/,\n      lookbehind: !0,\n      inside: t\n    }, {\n      pattern: /(^|\\s)\\/\\*\\s[\\s\\S]*?\\*\\/(?=\\s|$)/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: t\n    }, {\n      pattern: /(^|\\s)!\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n      lookbehind: !0,\n      greedy: !0,\n      inside: t\n    }],\n    number: [{\n      pattern: /(^|\\s)[+-]?\\d+(?=\\s|$)/,\n      lookbehind: !0\n    }, {\n      pattern: /(^|\\s)[+-]?0(?:b[01]+|o[0-7]+|d\\d+|x[\\dA-F]+)(?=\\s|$)/i,\n      lookbehind: !0\n    }, {\n      pattern: /(^|\\s)[+-]?\\d+\\/\\d+\\.?(?=\\s|$)/,\n      lookbehind: !0\n    }, {\n      pattern: /(^|\\s)\\+?\\d+\\+\\d+\\/\\d+(?=\\s|$)/,\n      lookbehind: !0\n    }, {\n      pattern: /(^|\\s)-\\d+-\\d+\\/\\d+(?=\\s|$)/,\n      lookbehind: !0\n    }, {\n      pattern: /(^|\\s)[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:e[+-]?\\d+)?(?=\\s|$)/i,\n      lookbehind: !0\n    }, {\n      pattern: /(^|\\s)NAN:\\s+[\\da-fA-F]+(?=\\s|$)/,\n      lookbehind: !0\n    }, {\n      pattern: /(^|\\s)[+-]?0(?:b1\\.[01]*|o1\\.[0-7]*|d1\\.\\d*|x1\\.[\\dA-F]*)p\\d+(?=\\s|$)/i,\n      lookbehind: !0\n    }],\n    regexp: {\n      pattern: /(^|\\s)R\\/\\s+(?:\\\\\\S|[^\\\\/])*\\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\\s|$)/,\n      lookbehind: !0,\n      alias: \"number\",\n      inside: {\n        variable: /\\\\\\S/,\n        keyword: /[+?*\\[\\]^$(){}.|]/,\n        operator: {\n          pattern: /(\\/)[idmsr]+(?:-[idmsr]+)?/,\n          lookbehind: !0\n        }\n      }\n    },\n    \"boolean\": {\n      pattern: /(^|\\s)[tf](?=\\s|$)/,\n      lookbehind: !0\n    },\n    \"custom-string\": {\n      pattern: /(^|\\s)[A-Z0-9\\-]+\"\\s(?:\\\\\\S|[^\"\\\\])*\"/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        number: /\\\\\\S|%\\w|\\//\n      }\n    },\n    \"multiline-string\": [{\n      pattern: /(^|\\s)STRING:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*;(?=\\s|$)/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        number: s.number,\n        \"semicolon-or-setlocal\": {\n          pattern: /((?:\\n|\\r\\n)\\s*);(?=\\s|$)/,\n          lookbehind: !0,\n          alias: \"function\"\n        }\n      }\n    }, {\n      pattern: /(^|\\s)HEREDOC:\\s+\\S+(?:\\n|\\r\\n).*(?:\\n|\\r\\n)\\s*\\S+(?=\\s|$)/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"string\",\n      inside: s\n    }, {\n      pattern: /(^|\\s)\\[(={0,6})\\[\\s[\\s\\S]*?\\]\\2\\](?=\\s|$)/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"string\",\n      inside: s\n    }],\n    \"special-using\": {\n      pattern: /(^|\\s)USING:(?:\\s\\S+)*(?=\\s+;(?:\\s|$))/,\n      lookbehind: !0,\n      alias: \"function\",\n      inside: {\n        string: {\n          pattern: /(\\s)[^:\\s]+/,\n          lookbehind: !0\n        }\n      }\n    },\n    \"stack-effect-delimiter\": [{\n      pattern: /(^|\\s)(?:call|execute|eval)?\\((?=\\s)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    }, {\n      pattern: /(\\s)--(?=\\s)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    }, {\n      pattern: /(\\s)\\)(?=\\s|$)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    }],\n    combinators: {\n      pattern: null,\n      lookbehind: !0,\n      alias: \"keyword\"\n    },\n    \"kernel-builtin\": {\n      pattern: null,\n      lookbehind: !0,\n      alias: \"variable\"\n    },\n    \"sequences-builtin\": {\n      pattern: null,\n      lookbehind: !0,\n      alias: \"variable\"\n    },\n    \"math-builtin\": {\n      pattern: null,\n      lookbehind: !0,\n      alias: \"variable\"\n    },\n    \"constructor-word\": {\n      pattern: /(^|\\s)<(?!=+>|-+>)\\S+>(?=\\s|$)/,\n      lookbehind: !0,\n      alias: \"keyword\"\n    },\n    \"other-builtin-syntax\": {\n      pattern: null,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    \"conventionally-named-word\": {\n      pattern: /(^|\\s)(?!\")(?:(?:set|change|with|new)-\\S+|\\$\\S+|>[^>\\s]+|[^:>\\s]+>|[^>\\s]+>[^>\\s]+|\\+[^+\\s]+\\+|[^?\\s]+\\?|\\?[^?\\s]+|[^>\\s]+>>|>>[^>\\s]+|[^<\\s]+<<|\\([^()\\s]+\\)|[^!\\s]+!|[^*\\s]\\S*\\*|[^.\\s]\\S*\\.)(?=\\s|$)/,\n      lookbehind: !0,\n      alias: \"keyword\"\n    },\n    \"colon-syntax\": {\n      pattern: /(^|\\s)(?:[A-Z0-9\\-]+#?)?:{1,2}\\s+(?:;\\S+|(?!;)\\S+)(?=\\s|$)/,\n      lookbehind: !0,\n      greedy: !0,\n      alias: \"function\"\n    },\n    \"semicolon-or-setlocal\": {\n      pattern: /(\\s)(?:;|:>)(?=\\s|$)/,\n      lookbehind: !0,\n      alias: \"function\"\n    },\n    \"curly-brace-literal-delimiter\": [{\n      pattern: /(^|\\s)[a-z]*\\{(?=\\s)/i,\n      lookbehind: !0,\n      alias: \"operator\"\n    }, {\n      pattern: /(\\s)\\}(?=\\s|$)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    }],\n    \"quotation-delimiter\": [{\n      pattern: /(^|\\s)\\[(?=\\s)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    }, {\n      pattern: /(\\s)\\](?=\\s|$)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    }],\n    \"normal-word\": {\n      pattern: /(^|\\s)[^\"\\s]\\S*(?=\\s|$)/,\n      lookbehind: !0\n    },\n    string: {\n      pattern: /\"(?:\\\\\\S|[^\"\\\\])*\"/,\n      greedy: !0,\n      inside: s\n    }\n  },\n      n = function n(e) {\n    return (e + \"\").replace(/([.?*+\\^$\\[\\]\\\\(){}|\\-])/g, \"\\\\$1\");\n  },\n      r = function r(e) {\n    return new RegExp(\"(^|\\\\s)(?:\" + e.map(n).join(\"|\") + \")(?=\\\\s|$)\");\n  },\n      a = {\n    \"kernel-builtin\": [\"or\", \"2nipd\", \"4drop\", \"tuck\", \"wrapper\", \"nip\", \"wrapper?\", \"callstack>array\", \"die\", \"dupd\", \"callstack\", \"callstack?\", \"3dup\", \"hashcode\", \"pick\", \"4nip\", \"build\", \">boolean\", \"nipd\", \"clone\", \"5nip\", \"eq?\", \"?\", \"=\", \"swapd\", \"2over\", \"clear\", \"2dup\", \"get-retainstack\", \"not\", \"tuple?\", \"dup\", \"3nipd\", \"call\", \"-rotd\", \"object\", \"drop\", \"assert=\", \"assert?\", \"-rot\", \"execute\", \"boa\", \"get-callstack\", \"curried?\", \"3drop\", \"pickd\", \"overd\", \"over\", \"roll\", \"3nip\", \"swap\", \"and\", \"2nip\", \"rotd\", \"throw\", \"(clone)\", \"hashcode*\", \"spin\", \"reach\", \"4dup\", \"equal?\", \"get-datastack\", \"assert\", \"2drop\", \"<wrapper>\", \"boolean?\", \"identity-hashcode\", \"identity-tuple?\", \"null\", \"composed?\", \"new\", \"5drop\", \"rot\", \"-roll\", \"xor\", \"identity-tuple\", \"boolean\"],\n    \"other-builtin-syntax\": [\"=======\", \"recursive\", \"flushable\", \">>\", \"<<<<<<\", \"M\\\\\", \"B\", \"PRIVATE>\", \"\\\\\", \"======\", \"final\", \"inline\", \"delimiter\", \"deprecated\", \"<PRIVATE\", \">>>>>>\", \"<<<<<<<\", \"parse-complex\", \"malformed-complex\", \"read-only\", \">>>>>>>\", \"call-next-method\", \"<<\", \"foldable\", \"$\", \"$[\", \"${\"],\n    \"sequences-builtin\": [\"member-eq?\", \"mismatch\", \"append\", \"assert-sequence=\", \"longer\", \"repetition\", \"clone-like\", \"3sequence\", \"assert-sequence?\", \"last-index-from\", \"reversed\", \"index-from\", \"cut*\", \"pad-tail\", \"join-as\", \"remove-eq!\", \"concat-as\", \"but-last\", \"snip\", \"nths\", \"nth\", \"sequence\", \"longest\", \"slice?\", \"<slice>\", \"remove-nth\", \"tail-slice\", \"empty?\", \"tail*\", \"member?\", \"virtual-sequence?\", \"set-length\", \"drop-prefix\", \"iota\", \"unclip\", \"bounds-error?\", \"unclip-last-slice\", \"non-negative-integer-expected\", \"non-negative-integer-expected?\", \"midpoint@\", \"longer?\", \"?set-nth\", \"?first\", \"rest-slice\", \"prepend-as\", \"prepend\", \"fourth\", \"sift\", \"subseq-start\", \"new-sequence\", \"?last\", \"like\", \"first4\", \"1sequence\", \"reverse\", \"slice\", \"virtual@\", \"repetition?\", \"set-last\", \"index\", \"4sequence\", \"max-length\", \"set-second\", \"immutable-sequence\", \"first2\", \"first3\", \"supremum\", \"unclip-slice\", \"suffix!\", \"insert-nth\", \"tail\", \"3append\", \"short\", \"suffix\", \"concat\", \"flip\", \"immutable?\", \"reverse!\", \"2sequence\", \"sum\", \"delete-all\", \"indices\", \"snip-slice\", \"<iota>\", \"check-slice\", \"sequence?\", \"head\", \"append-as\", \"halves\", \"sequence=\", \"collapse-slice\", \"?second\", \"slice-error?\", \"product\", \"bounds-check?\", \"bounds-check\", \"immutable\", \"virtual-exemplar\", \"harvest\", \"remove\", \"pad-head\", \"last\", \"set-fourth\", \"cartesian-product\", \"remove-eq\", \"shorten\", \"shorter\", \"reversed?\", \"shorter?\", \"shortest\", \"head-slice\", \"pop*\", \"tail-slice*\", \"but-last-slice\", \"iota?\", \"append!\", \"cut-slice\", \"new-resizable\", \"head-slice*\", \"sequence-hashcode\", \"pop\", \"set-nth\", \"?nth\", \"second\", \"join\", \"immutable-sequence?\", \"<reversed>\", \"3append-as\", \"virtual-sequence\", \"subseq?\", \"remove-nth!\", \"length\", \"last-index\", \"lengthen\", \"assert-sequence\", \"copy\", \"move\", \"third\", \"first\", \"tail?\", \"set-first\", \"prefix\", \"bounds-error\", \"<repetition>\", \"exchange\", \"surround\", \"cut\", \"min-length\", \"set-third\", \"push-all\", \"head?\", \"subseq-start-from\", \"delete-slice\", \"rest\", \"sum-lengths\", \"head*\", \"infimum\", \"remove!\", \"glue\", \"slice-error\", \"subseq\", \"push\", \"replace-slice\", \"subseq-as\", \"unclip-last\"],\n    \"math-builtin\": [\"number=\", \"next-power-of-2\", \"?1+\", \"fp-special?\", \"imaginary-part\", \"float>bits\", \"number?\", \"fp-infinity?\", \"bignum?\", \"fp-snan?\", \"denominator\", \"gcd\", \"*\", \"+\", \"fp-bitwise=\", \"-\", \"u>=\", \"/\", \">=\", \"bitand\", \"power-of-2?\", \"log2-expects-positive\", \"neg?\", \"<\", \"log2\", \">\", \"integer?\", \"number\", \"bits>double\", \"2/\", \"zero?\", \"bits>float\", \"float?\", \"shift\", \"ratio?\", \"rect>\", \"even?\", \"ratio\", \"fp-sign\", \"bitnot\", \">fixnum\", \"complex?\", \"/i\", \"integer>fixnum\", \"/f\", \"sgn\", \">bignum\", \"next-float\", \"u<\", \"u>\", \"mod\", \"recip\", \"rational\", \">float\", \"2^\", \"integer\", \"fixnum?\", \"neg\", \"fixnum\", \"sq\", \"bignum\", \">rect\", \"bit?\", \"fp-qnan?\", \"simple-gcd\", \"complex\", \"<fp-nan>\", \"real\", \">fraction\", \"double>bits\", \"bitor\", \"rem\", \"fp-nan-payload\", \"real-part\", \"log2-expects-positive?\", \"prev-float\", \"align\", \"unordered?\", \"float\", \"fp-nan?\", \"abs\", \"bitxor\", \"integer>fixnum-strict\", \"u<=\", \"odd?\", \"<=\", \"/mod\", \">integer\", \"real?\", \"rational?\", \"numerator\"]\n  };\n\n  Object.keys(a).forEach(function (e) {\n    i[e].pattern = r(a[e]);\n  });\n  i.combinators.pattern = r([\"2bi\", \"while\", \"2tri\", \"bi*\", \"4dip\", \"both?\", \"same?\", \"tri@\", \"curry\", \"prepose\", \"3bi\", \"?if\", \"tri*\", \"2keep\", \"3keep\", \"curried\", \"2keepd\", \"when\", \"2bi*\", \"2tri*\", \"4keep\", \"bi@\", \"keepdd\", \"do\", \"unless*\", \"tri-curry\", \"if*\", \"loop\", \"bi-curry*\", \"when*\", \"2bi@\", \"2tri@\", \"with\", \"2with\", \"either?\", \"bi\", \"until\", \"3dip\", \"3curry\", \"tri-curry*\", \"tri-curry@\", \"bi-curry\", \"keepd\", \"compose\", \"2dip\", \"if\", \"3tri\", \"unless\", \"tuple\", \"keep\", \"2curry\", \"tri\", \"most\", \"while*\", \"dip\", \"composed\", \"bi-curry@\", \"find-last-from\", \"trim-head-slice\", \"map-as\", \"each-from\", \"none?\", \"trim-tail\", \"partition\", \"if-empty\", \"accumulate*\", \"reject!\", \"find-from\", \"accumulate-as\", \"collector-for-as\", \"reject\", \"map\", \"map-sum\", \"accumulate!\", \"2each-from\", \"follow\", \"supremum-by\", \"map!\", \"unless-empty\", \"collector\", \"padding\", \"reduce-index\", \"replicate-as\", \"infimum-by\", \"trim-tail-slice\", \"count\", \"find-index\", \"filter\", \"accumulate*!\", \"reject-as\", \"map-integers\", \"map-find\", \"reduce\", \"selector\", \"interleave\", \"2map\", \"filter-as\", \"binary-reduce\", \"map-index-as\", \"find\", \"produce\", \"filter!\", \"replicate\", \"cartesian-map\", \"cartesian-each\", \"find-index-from\", \"map-find-last\", \"3map-as\", \"3map\", \"find-last\", \"selector-as\", \"2map-as\", \"2map-reduce\", \"accumulate\", \"each\", \"each-index\", \"accumulate*-as\", \"when-empty\", \"all?\", \"collector-as\", \"push-either\", \"new-like\", \"collector-for\", \"2selector\", \"push-if\", \"2all?\", \"map-reduce\", \"3each\", \"any?\", \"trim-slice\", \"2reduce\", \"change-nth\", \"produce-as\", \"2each\", \"trim\", \"trim-head\", \"cartesian-find\", \"map-index\", \"if-zero\", \"each-integer\", \"unless-zero\", \"(find-integer)\", \"when-zero\", \"find-last-integer\", \"(all-integers?)\", \"times\", \"(each-integer)\", \"find-integer\", \"all-integers?\", \"unless-negative\", \"if-positive\", \"when-positive\", \"when-negative\", \"unless-positive\", \"if-negative\", \"case\", \"2cleave\", \"cond>quot\", \"case>quot\", \"3cleave\", \"wrong-values\", \"to-fixed-point\", \"alist>quot\", \"cond\", \"cleave\", \"call-effect\", \"recursive-hashcode\", \"spread\", \"deep-spread>quot\", \"2||\", \"0||\", \"n||\", \"0&&\", \"2&&\", \"3||\", \"1||\", \"1&&\", \"n&&\", \"3&&\", \"smart-unless*\", \"keep-inputs\", \"reduce-outputs\", \"smart-when*\", \"cleave>array\", \"smart-with\", \"smart-apply\", \"smart-if\", \"inputs/outputs\", \"output>sequence-n\", \"map-outputs\", \"map-reduce-outputs\", \"dropping\", \"output>array\", \"smart-map-reduce\", \"smart-2map-reduce\", \"output>array-n\", \"nullary\", \"input<sequence\", \"append-outputs\", \"drop-inputs\", \"inputs\", \"smart-2reduce\", \"drop-outputs\", \"smart-reduce\", \"preserving\", \"smart-when\", \"outputs\", \"append-outputs-as\", \"smart-unless\", \"smart-if*\", \"sum-outputs\", \"input<sequence-unsafe\", \"output>sequence\"]), e.languages.factor = i;\n}(Prism);"],"sourceRoot":""}