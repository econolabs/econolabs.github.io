{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-php.min.js"],"names":["n","languages","php","extend","keyword","pattern","alias","constant","comment","lookbehind","insertBefore","delimiter","variable","inside","punctuation","property","e","greedy","interpolation","string","hooks","add","test","code","buildPlaceholders","tokenizePlaceholders","Prism"],"mappings":"+EAAC,SAAUA,GACTA,EAAEC,UAAUC,IAAMF,EAAEC,UAAUE,OAAO,QAAS,CAC5CC,QAAS,ueACT,QAAW,CACTC,QAAS,sBACTC,MAAO,YAETC,SAAU,CAAC,uBAAwB,iBACnCC,QAAS,CACPH,QAAS,uCACTI,YAAY,KAEZT,EAAEC,UAAUS,aAAa,MAAO,SAAU,CAC5C,gBAAiB,CACfL,QAAS,eACTI,YAAY,EACZH,MAAO,aAEPN,EAAEC,UAAUS,aAAa,MAAO,UAAW,CAC7CC,UAAW,CACTN,QAAS,6BACTC,MAAO,eAEPN,EAAEC,UAAUS,aAAa,MAAO,UAAW,CAC7CE,SAAU,sBACV,QAAW,CACTP,QAAS,kCACTI,YAAY,EACZI,OAAQ,CACNC,YAAa,SAGfd,EAAEC,UAAUS,aAAa,MAAO,WAAY,CAC9CK,SAAU,CACRV,QAAS,YACTI,YAAY,KAGhB,IAAIO,EAAI,CACNX,QAAS,6EACTI,YAAY,EACZI,OAAQb,EAAEC,UAAUC,KAEtBF,EAAEC,UAAUS,aAAa,MAAO,SAAU,CACxC,gBAAiB,CACfL,QAAS,kDACTY,QAAQ,EACRX,MAAO,SACPO,OAAQ,CACNF,UAAW,CACTN,QAAS,2BACTC,MAAO,SACPO,OAAQ,CACNC,YAAa,mBAKrB,iBAAkB,CAChBT,QAAS,sGACTY,QAAQ,EACRX,MAAO,SACPO,OAAQ,CACNF,UAAW,CACTN,QAAS,yCACTC,MAAO,SACPO,OAAQ,CACNC,YAAa,iBAGjBI,cAAeF,IAGnB,uBAAwB,CACtBX,QAAS,yBACTY,QAAQ,EACRX,MAAO,UAET,uBAAwB,CACtBD,QAAS,yBACTY,QAAQ,EACRX,MAAO,SACPO,OAAQ,CACNK,cAAeF,aAGVhB,EAAEC,UAAUC,IAAIiB,OAAQnB,EAAEoB,MAAMC,IAAI,mBAAmB,SAAUL,GACtE,MAAMM,KAAKN,EAAEO,OACfvB,EAAEC,UAAU,qBAAqBuB,kBAAkBR,EAAG,MAAO,qJAE7DhB,EAAEoB,MAAMC,IAAI,kBAAkB,SAAUL,GAC1ChB,EAAEC,UAAU,qBAAqBwB,qBAAqBT,EAAG,UA3F5D,CA6FCU","file":"289-d401fe7a1b8793be2463.js","sourcesContent":["!function (n) {\n  n.languages.php = n.languages.extend(\"clike\", {\n    keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    \"boolean\": {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: \"constant\"\n    },\n    constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: !0\n    }\n  }), n.languages.insertBefore(\"php\", \"string\", {\n    \"shell-comment\": {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: !0,\n      alias: \"comment\"\n    }\n  }), n.languages.insertBefore(\"php\", \"comment\", {\n    delimiter: {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: \"important\"\n    }\n  }), n.languages.insertBefore(\"php\", \"keyword\", {\n    variable: /\\$+(?:\\w+\\b|(?={))/i,\n    \"package\": {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }), n.languages.insertBefore(\"php\", \"operator\", {\n    property: {\n      pattern: /(->)[\\w]+/,\n      lookbehind: !0\n    }\n  });\n  var e = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: !0,\n    inside: n.languages.php\n  };\n  n.languages.insertBefore(\"php\", \"string\", {\n    \"nowdoc-string\": {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    \"heredoc-string\": {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: e\n      }\n    },\n    \"single-quoted-string\": {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: !0,\n      alias: \"string\"\n    },\n    \"double-quoted-string\": {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        interpolation: e\n      }\n    }\n  }), delete n.languages.php.string, n.hooks.add(\"before-tokenize\", function (e) {\n    if (/<\\?/.test(e.code)) {\n      n.languages[\"markup-templating\"].buildPlaceholders(e, \"php\", /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi);\n    }\n  }), n.hooks.add(\"after-tokenize\", function (e) {\n    n.languages[\"markup-templating\"].tokenizePlaceholders(e, \"php\");\n  });\n}(Prism);"],"sourceRoot":""}