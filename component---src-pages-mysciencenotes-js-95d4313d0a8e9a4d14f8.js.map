{"version":3,"sources":["webpack:///./src/pages/mysciencenotes.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/mediatemplates/ScienceNotesEditor.js"],"names":["MyScienceNotes","userEmail","useSelector","selectApplication","email","replace","React","useState","currentEditId","setCurrentEditId","useFirebaseNode","userNotes","data","loading","error","screenSize","useMedia","notes","Object","keys","map","item","note","id","filter","bg","expand","sticky","className","Brand","size","variant","onClick","key","Header","siteTitle","style","margin","to","color","textDecoration","href","src","alt","verticalAlign","width","height","borderRadius","objectFit","defaultProps","Layout","children","useStaticQuery","site","siteMetadata","title","maxWidth","padding","Date","getFullYear","author","ScienceNoteCard","content","currentFullMode","setCurrentFullMode","toggleMode","ReactHtmlParser","last_edit","cited_reference","date","plagiarism","h6","h5","h4","h3","h2","h1","Body","ScienceNotesEditor","user","avatarUrl","savedAnswer","setSavedAnswer","methods","useForm","defaultValues","handleSubmit","currentField","setCurrentField","tags","onSubmit","console","log","length","idNote","firebase","database","ref","child","push","old_editions","val","keyItem","postObject","type","deleted","Intl","DateTimeFormat","weekday","year","month","day","hour","minute","format","updates","update","then","setTimeout","window","location","reload","aria-label","ActiveField","name","label","block","disabled","useFormContext","Group","controlId","Label","Control","register","as","rows"],"mappings":"uHAAA,kLAkBe,SAASA,IACtB,IACIC,EADUC,YAAYC,KAAmBC,MACvBC,QAAQ,gBAAiB,KAC/C,EAA0CC,IAAMC,SAAS,MAAlDC,EAAP,KAAsBC,EAAtB,KAEA,EAA4CC,YAC1C,gBAAkBT,EAAY,WADlBU,EAAd,EAAQC,KAAiBC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,MAG5BC,EAAaC,YAEjB,CAAC,qBAAsB,qBAAsB,sBAE7C,CAAC,QAAS,SAAU,SAEpB,SAOF,GAAMH,IAAYF,EAAa,OAAO,kBAAC,IAAD,YACtC,GAAMG,EAAS,OAAO,kBAAC,IAAD,YAEtB,IAAIG,EAAQC,OAAOC,KAAKR,GAAWS,KAAI,SAACC,GAAW,OAAOV,EAAUU,MAGpE,OAAMb,EACG,kBAAC,IAAD,KACL,kBAAC,IAAD,CAAoBc,KAAwB,QAAlBd,EAA0B,CAAEe,GAAI,OAAUN,EAAMO,QAAO,SAAAF,GAAI,OAAIA,EAAKC,KAAOf,KAAe,GAAIO,WAAYA,KAIjI,kBAAC,IAAD,KACL,kBAAC,IAAD,CAAQU,GAAG,QAAQC,OAAO,KAAKC,OAAO,MAAMC,UAAU,gCACpD,kBAAC,IAAOC,MAAR,cACA,kBAAC,IAAD,CAAQC,KAAK,KAAKC,QAAQ,oBAAoBC,QAAS,kBAAMvB,EAAiB,SAA9E,QAMCQ,GAASA,EAAMG,KAAI,SAAAE,GAAI,OACxB,kBAAC,IAAD,CAAiBW,IAAKX,EAAKC,GAAID,KAAMA,EAAMb,iBAAkBA,U,gGCzD7DyB,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,yBAAKP,UAAU,kCAAf,IAEE,wBAAIQ,MAAO,CAAEC,OAAQ,IACnB,kBAAC,OAAD,CAAMC,GAAG,IAAIF,MAAO,CAAEG,MAAM,OAASC,eAAe,SAAaL,IAEnE,uBAAGP,UAAU,eAAea,KAAK,8BAC/B,yBACEC,IAAI,4EAGJC,IAAI,GACJP,MAAO,CACLQ,cAAe,SACfC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdvB,OAAQ,kBACRwB,UAAW,cAqCrBd,EAAOe,aAAe,CACpBd,UAAU,IAGGD,Q,UCXAgB,IAtCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVvC,EAAOwC,yBAAe,cAW5B,OACE,oCACE,kBAAC,EAAD,CAAQjB,UAAWvB,EAAKyC,KAAKC,aAAaC,QAC1C,yBACEnB,MAAO,CACLC,OAAO,SACPmB,SAAU,IACVC,QAAS,SAGX,8BAAON,GACP,gCACE,0BAAMf,MAAO,CAACG,MAAO,aAArB,MACG,IAAImB,MAAOC,cADd,KAC+B,IAC/B,uBAAGlB,KAAK,6BAA6BL,MAAO,CAACG,MAAO,aAAc3B,EAAKyC,KAAKC,aAAaM,c,y3BCT5F,SAASC,EAAT,GAA6D,IAAD,MAXhDC,EAWexC,EAAiC,EAAjCA,KAAiC,IAA3Bb,wBAA2B,MAAR,KAAQ,EAC/D,EAA8CH,IAAMC,UAAS,GAAtDwD,EAAP,KAAwBC,EAAxB,KAWA,SAASC,IACLD,GAAmB,SAACD,GAAD,OAAsBA,KAG7C,MAAmB,UAbA/C,YAEf,CAAC,qBAAsB,qBAAsB,sBAE7C,CAAC,QAAS,SAAU,SAEpB,SAQO,yBAAKiB,IAAKX,EAAKC,IAClB,2BAAOK,UAAWmC,EAAkB,GAAK,cAAgBG,IAAgB5C,EAAKwC,QAAQK,YACtF,6BACA,kBAAC,IAAD,CAAQpC,QAAQ,gBAAgBD,KAAK,KAAKE,QAAS,kBAAMvB,EAAiBa,EAAKC,MAA/E,IAAqF,kBAAC,IAAD,OACrF,kBAAC,IAAD,CAAQQ,QAAQ,gBAAgBD,KAAK,KAAKE,QAAS,kBAAMiC,MAAzD,IAAwE,kBAAC,IAAD,OACxE,0BAAMV,MAAM,mBAAkB,+BAAQjC,EAAKwC,QAAQM,kBAClD,MACD,0BAAMb,MAAM,cAAa,+BAAQjC,EAAK+C,KAAO,MAApB,KAA6B/C,EAAKwC,QAAQQ,aAEnE,8BAID,kBAAC,IAAD,CAAMrC,IAAKX,EAAKC,GAAIK,UAAU,QACjC,kBAAC,IAAKM,OAAN,KACI,kBAAC,IAAD,CAAQH,QAAQ,gBAAgBD,KAAK,KAAKE,QAAS,kBAAMvB,EAAiBa,EAAKC,MAA/E,IAAqF,kBAAC,IAAD,OACrF,kBAAC,IAAD,CAAQQ,QAAQ,gBAAgBD,KAAK,KAAKE,QAAS,kBAAMiC,MAAzD,IAAwE,kBAAC,IAAD,OACxE,0BAAMrC,UAAU,QA5ClBkC,OADSA,EA6C4BxC,EAAKwC,UA5C1CA,EAASS,GAAaT,EAAQS,GAC9BT,WAASU,GAAaV,EAAQU,GAC9BV,WAASW,GAAaX,EAAQW,GAC9BX,WAASY,GAAaZ,EAAQY,GAC9BZ,WAASa,GAAab,EAAQa,GAC9Bb,WAASc,GAAad,EAAQc,GAC7B,cAwCH,kBAAC,IAAKC,KAAN,KAEI,gCAAYjD,UAAU,mBAClB,2BAAOA,UAAWmC,EAAkB,GAAK,cAAiBzC,SAAD,UAACA,EAAMwC,eAAP,OAAC,EAAeK,UAAYD,IAAgB5C,EAAKwC,QAAQK,WAAa,KAE5H7C,SAAD,UAACA,EAAMwC,eAAP,OAAC,EAAeM,gBACd,4BAAQxC,UAAU,qBACd,0BAAM2B,MAAM,mBAAZ,IAAgCjC,EAAKwC,QAAQM,kBAE/C,KAEH9C,SAAD,UAACA,EAAMwC,eAAP,OAAC,EAAeQ,WACd,4BAAQ1C,UAAU,qBACd,0BAAM2B,MAAM,cAAcjC,EAAK+C,KAAO,MAAtC,IAA8C/C,EAAKwC,QAAQQ,WAA3D,MAEF,QAyBP,SAASQ,EAAT,GAAmD,IAAD,EAApBxD,EAAoB,EAApBA,KAAMP,EAAc,EAAdA,WACzCX,EAAQF,YAAYC,KAAmBC,MACvC2E,EAAO7E,YAAYC,KAAmB4E,KACtCC,EAAS,UAAG9E,YAAYC,YAAf,aAAG,EAAgC6E,UAClD,EAAsCzE,mBAAS,MAAxC0E,EAAP,KAAoBC,EAApB,KACMC,EAAUC,YAAQ,CAAEC,cAAiB/D,WAAMwC,QAAUxC,EAAKwC,QAAU,KAClEwB,EAAiBH,EAAjBG,aACR,EAAwC/E,mBAAS,aAA1CgF,EAAP,KAAqBC,EAArB,KACA,EAAwBjF,mBAAS,IAA1BkF,EAAP,UASA,IAAMC,EAAW,SAAA9E,GAGb,GAFA+E,QAAQC,IAAIhF,GAERR,EAAMyF,OAAS,EAAG,CAAC,IAAD,EACd5F,EAAYG,EAAMC,QAAQ,gBAAiB,KAC3CyF,EAAWxE,WAAMC,IAAkB,QAAZD,EAAKC,GAAeD,EAAKC,GAAKwE,IAASC,WAAWC,IAAI,gBAAkBhG,GAAWiG,MAAM,SAASC,OAAOlE,IAEhImE,EA1BqB,QAAnBC,EA0BsB/E,SAAD,UAACA,EAAMwC,eAAP,aAAC,EAAesC,eA1B8B,mBAARC,GAAuC,iBAARA,EA4B1F,CAACzF,EAAKuD,WAFO,sBACXjD,OAAOC,KAAKG,EAAKwC,QAAQsC,cAAchF,KAAI,SAACkF,GAAc,OAAOhF,EAAKwC,QAAQsC,aAAaE,OADhF,CAC6F1F,EAAKuD,YAGrHwB,QAAQC,IAAIQ,GAEZ,IAAIG,EAAa,CACbhF,GAAIuE,EAKJU,KAAM,eACN1C,QAAQ,EAAD,KAAOlD,GAAP,IAAawF,eAAcX,SAElCgB,SAAS,EACTrG,MAAOA,EACP2E,KAAMA,EACNC,UAAaA,GAAwB,KACrCX,KAAM,IAAIqC,KAAKC,eAAe,KAAM,CAChCC,QAAS,QACTC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YACTC,OAAO,IAAIxD,OAGlBiC,QAAQC,IAAIW,GAEZ,IAAIY,EAAU,GAGd,OAFAA,EAAQ,gBAAkBlH,EAAY,UAAY6F,GAAUS,EAErDR,IAASC,WAAWC,MAAMmB,OAAOD,GAASE,MAAK,WAClDnC,GAAe,GACfoC,WAAWC,OAAOC,SAASC,SAAU,QA9DrD,IAAkBpB,GAuEd,OAAO,kBAAC,IAAiBlB,EAEL,UAAfpE,EACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAa2G,aAAW,gBAAgB5F,KAAK,MACzC,kBAAC,IAAD,CAAQC,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,QAAnE,MACA,kBAAC,IAAD,CAAQzD,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,QAAnE,MACA,kBAAC,IAAD,CAAQzD,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,QAAnE,MACA,kBAAC,IAAD,CAAQzD,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,QAAnE,MACA,kBAAC,IAAD,CAAQzD,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,QAAnE,MACA,kBAAC,IAAD,CAAQzD,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,QAAnE,MACA,kBAAC,IAAD,CAAQzD,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,eAAnE,aACA,kBAAC,IAAD,CAAQzD,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,qBAAnE,mBACA,kBAAC,IAAD,CAAQzD,QAAQ,oBAAoBC,QAAS,kBAAMwD,EAAgB,gBAAnE,eAEJ,kBAAC,IAAD,CAAME,SAAUJ,EAAaI,IACvB,WACE,OAAQH,GACJ,IAAK,KAAM,OAAO,kBAACoC,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,gBAC7E,IAAK,KAAM,OAAO,kBAACF,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,gBAC7E,IAAK,KAAM,OAAO,kBAACF,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,gBAC7E,IAAK,KAAM,OAAO,kBAACF,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,gBAC7E,IAAK,KAAM,OAAO,kBAACF,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,gBAC7E,IAAK,KAAM,OAAO,kBAACF,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,gBAC7E,IAAK,YAAa,OAAO,kBAACF,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,UACpF,IAAK,kBAAmB,OAAO,kBAACF,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,aAC1F,IAAK,aAAc,OAAO,kBAACF,EAAD,CAAa1F,IAAKsD,EAAcqC,KAAMrC,EAAcsC,MAAO,kBAV3F,GAgBF,kBAAC,IAAD,CACI9F,QAAQ,oBACRyE,KAAK,SACL1E,KAAK,KACLgG,OAAK,EACLC,SAAU9C,GALd,eAcR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMS,SAAUJ,EAAaI,IACzB,kBAACiC,EAAD,CAAaC,KAAM,KAAMC,MAAO,cAChC,kBAACF,EAAD,CAAaC,KAAM,YAAaC,MAAO,UACvC,kBAACF,EAAD,CAAaC,KAAM,kBAAmBC,MAAO,aAC7C,kBAACF,EAAD,CAAaC,KAAM,aAAcC,MAAO,iBACxC,kBAAC,IAAD,CACI9F,QAAQ,oBACRyE,KAAK,SACL1E,KAAK,KACLgG,OAAK,EACLC,SAAU9C,GALd,gBAwBpB,SAAS0C,EAAT,GAA8C,IAAvBC,EAAsB,EAAtBA,KAAsB,IAAhBC,aAAgB,MAAR,KAAQ,EACnC1C,EAAU6C,cAChB,OAAO,kBAAC,IAAKC,MAAN,CAAYC,UAAW,SAAWN,GACrC,kBAAC,IAAKO,MAAN,CAAYvG,UAAU,oBAAsBiG,GAAgBD,GAC5D,kBAAC,IAAKQ,QAAN,iBACQjD,EAAQkD,SAAST,GADzB,CAEIU,GAAG,WACHC,KAAK","file":"component---src-pages-mysciencenotes-js-95d4313d0a8e9a4d14f8.js","sourcesContent":["import React from \"react\";\n//import { useForm } from \"react-hook-form\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\nimport { useSelector } from \"react-redux\";\n\nimport Layout from \"../components/layout\";\n\nimport { selectApplication } from \"../features/application/applicationSlice\";\nimport useMedia from \"../hooks/useMedia\";\n\nimport ScienceNotesEditor, { ScienceNoteCard } from \"../mediatemplates/ScienceNotesEditor\";\n\n\nimport Button from \"react-bootstrap/Button\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nimport \"../mediatemplates/ScienceNotes.css\";\n\nexport default function MyScienceNotes() {\n  const email = useSelector(selectApplication).email;\n  let userEmail = email.replace(/[^a-zA-Z0-9]/g, \"_\");\n  const [currentEditId, setCurrentEditId] = React.useState(null);\n\n  const { data: userNotes, loading, error } = useFirebaseNode(\n    \"usersScience/\" + userEmail + \"/notes/\"\n  );\n  const screenSize = useMedia(\n    // Media queries\n    [\"(min-width: 810px)\", \"(min-width: 400px)\", \"(min-width: 100px)\"],\n    // Column counts (relates to above media queries by array index)\n    [\"large\", \"medium\", \"small\"],\n    // Default column count\n    \"large\"\n  );\n\n  //const { register, handleSubmit } = useForm();\n\n // const onSubmit = data => console.log(data);\n\n  if (!!loading || !userNotes) { return <Layout>...</Layout> }\n  if (!!error) { return <Layout>:-(</Layout> }\n\n  let notes = Object.keys(userNotes).map((item) => { return userNotes[item] });\n\n\n  if (!!currentEditId) {\n    return <Layout>\n      <ScienceNotesEditor note={currentEditId === \"new\" ? { id: \"new\" } : notes.filter(note => note.id === currentEditId)[0]} screenSize={screenSize} />\n    </Layout>\n  }\n\n  return <Layout>\n    <Navbar bg=\"light\" expand=\"sm\" sticky=\"top\" className=\"mb-2 justify-content-between\">\n      <Navbar.Brand >Notes</Navbar.Brand>\n      <Button size=\"sm\" variant=\"outline-secondary\" onClick={() => setCurrentEditId(\"new\")}>+</Button>\n      {/* <Form inline onSubmit={handleSubmit(onSubmit)} className=\"mt-0 mb-0\">\n          <FormControl {...register(\"search_string\")} className=\"mr-sm-2\" />\n          <Button size=\"sm\" variant=\"outline-secondary\" type=\"submit\"><SVGBootstrapIconSearch /></Button>\n        </Form> */}\n    </Navbar>\n    {!!notes && notes.map(note =>\n      <ScienceNoteCard key={note.id} note={note} setCurrentEditId={setCurrentEditId} />\n    )}\n  </Layout>\n}\n\n\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <nav className=\"navbar  navbar-light bg-light \"> {/* navbar-dark bg-primary */}\n\n    <h3 style={{ margin: 0 }}>\n      <Link to=\"/\" style={{ color: `gray`, textDecoration: `none`, }}>{siteTitle}</Link>\n    </h3>\n    <a className=\"navbar-brand\" href=\"https://vk.com/id151078439\">\n      <img\n        src=\"https://sun9-37.userapi.com/c317630/v317630439/76a0/Bz6QTfBog0I.jpg?ava=1\"\n        //  width=\"30\"\n        //  height=\"45\"\n        alt=\"\"\n        style={{\n          verticalAlign: 'middle',\n          width: '40px',\n          height: '40px',\n          borderRadius: '50%',\n          filter: 'grayscale(100%)',\n          objectFit: 'cover'\n        }} />\n    </a>\n  </nav>\n\n  // <header\n  //   style={{\n  //     background: `rebeccapurple`,\n  //     marginBottom: `1.45rem`,\n  //   }}\n  // >\n  //   <div\n  //     style={{\n  //       margin: `0 auto`,\n  //       maxWidth: 960,\n  //       padding: `1.45rem 1.0875rem`,\n  //     }}\n  //   >\n  //     <h1 style={{ margin: 0 }}>\n  //       <Link\n  //         to=\"/\"\n  //         style={{\n  //           color: `white`,\n  //           textDecoration: `none`,\n  //         }}\n  //       >\n  //         {siteTitle}\n  //       </Link>\n  //     </h1>\n  //   </div>\n  // </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 800,\n          padding: '2rem'\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          <span style={{color: 'darkgray'}}>\n          © {new Date().getFullYear()}, {\" \"}\n          <a href=\"https://vk.com/id151078439\" style={{color: 'darkgray'}}>{data.site.siteMetadata.author}</a>\n          </span>         \n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useForm, FormProvider, useFormContext } from \"react-hook-form\";\nimport firebase from \"gatsby-plugin-firebase\";\nimport ReactHtmlParser from 'react-html-parser'; //, { processNodes, convertNodeToElement, htmlparser2 }\n\nimport { selectApplication } from \"../features/application/applicationSlice\";\n\n//import CreatableSelectComponent from \"../components/CreatableSelectComponent\";\n\nimport useMedia from \"../hooks/useMedia\";\n\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Card from \"react-bootstrap/Card\";\n\nimport { SVGBootstrapIconPencilSquare, SVGBootstrapIconSearch, SVGBootstrapIconEnvelopeOpen } from \"../svgs\";\n\nfunction cardTitle(content) {\n    if (!!content?.h6) { return content.h6 }\n    if (!!content?.h5) { return content.h5 }\n    if (!!content?.h4) { return content.h4 }\n    if (!!content?.h3) { return content.h3 }\n    if (!!content?.h2) { return content.h2 }\n    if (!!content?.h1) { return content.h1 }\n    return \"Заголовок\"\n}\n\n\nexport function ScienceNoteCard({ note, setCurrentEditId = null }) {\n    const [currentFullMode, setCurrentFullMode] = React.useState(false);\n\n    const screenSize = useMedia(\n        // Media queries\n        [\"(min-width: 810px)\", \"(min-width: 400px)\", \"(min-width: 100px)\"],\n        // Column counts (relates to above media queries by array index)\n        [\"large\", \"medium\", \"small\"],\n        // Default column count\n        \"large\"\n    );\n\n    function toggleMode() {\n        setCurrentFullMode((currentFullMode) => !currentFullMode)\n    }\n\n    if (screenSize !== \"large\") {\n        return <div key={note.id}>\n            <small className={currentFullMode ? \"\" : \"line-clamp\"} >{ReactHtmlParser(note.content.last_edit)}</small>\n            <br />\n            <Button variant=\"outline-light\" size=\"sm\" onClick={() => setCurrentEditId(note.id)}> <SVGBootstrapIconPencilSquare /></Button>\n            <Button variant=\"outline-light\" size=\"sm\" onClick={() => toggleMode()}> <SVGBootstrapIconEnvelopeOpen /></Button>\n            <cite title=\"cited_reference\"><small>{note.content.cited_reference}</small></cite>\n            {\"   \"}\n            <cite title=\"plagiarism\"><small>{note.date + \"   \"}  {note.content.plagiarism}</small></cite>\n\n            <hr />\n        </div>\n    }\n\n    return <Card key={note.id} className=\"mb-1\">\n        <Card.Header>\n            <Button variant=\"outline-light\" size=\"sm\" onClick={() => setCurrentEditId(note.id)}> <SVGBootstrapIconPencilSquare /></Button>\n            <Button variant=\"outline-light\" size=\"sm\" onClick={() => toggleMode()}> <SVGBootstrapIconEnvelopeOpen /></Button>\n            <span className=\"ml-2\" >{cardTitle(note.content)}</span>\n        </Card.Header>\n        <Card.Body>\n            {/* <Card.Title>Special title treatment</Card.Title> */}\n            <blockquote className=\"blockquote mb-0\">\n                <small className={currentFullMode ? \"\" : \"line-clamp\"}>{!!note?.content?.last_edit ? ReactHtmlParser(note.content.last_edit) : \"-\"}</small>\n\n                {!!note?.content?.cited_reference ?\n                    <footer className=\"blockquote-footer\">\n                        <cite title=\"Сited_Reference\"> {note.content.cited_reference}</cite>\n                    </footer>\n                    : null}\n\n                {!!note?.content?.plagiarism ?\n                    <footer className=\"blockquote-footer\">\n                        <cite title=\"Plagiarism\">{note.date + \"   \"} {note.content.plagiarism} </cite>\n                    </footer>\n                    : null}\n\n            </blockquote>\n            {/* <Card.Text>{note.content.h3}</Card.Text> */}\n\n        </Card.Body>\n    </Card>\n}\n\n\n\n\n// let formFields = [\n//     { id: 0, name: 'h1' },\n//     { id: 1, name: 'h2' },\n//     { id: 2, name: 'h3' },\n//     { id: 3, name: 'h4' },\n//     { id: 4, name: 'h5' },\n//     { id: 5, name: 'h6' },\n//     { id: 6, name: 'last_edit' },\n//     { id: 7, name: 'cited_reference' }\n// ]\n\nfunction isObject(val) { if (val === null) { return false; } return ((typeof val === 'function') || (typeof val === 'object')); }\n\nexport default function ScienceNotesEditor({ note, screenSize }) {\n    const email = useSelector(selectApplication).email;\n    const user = useSelector(selectApplication).user;\n    const avatarUrl = useSelector(selectApplication)?.avatarUrl;\n    const [savedAnswer, setSavedAnswer] = useState(null);\n    const methods = useForm({ defaultValues: !!note?.content ? note.content : {} });\n    const { handleSubmit } = methods;\n    const [currentField, setCurrentField] = useState('last_edit');\n    const [tags, setTags] = useState([]);\n\n    function updateTags(newtags) {\n        setTags(tags => [...newtags]);\n    }\n\n    //  console.log(note);\n\n\n    const onSubmit = data => {\n        console.log(data);\n\n        if (email.length > 6) {\n            let userEmail = email.replace(/[^a-zA-Z0-9]/g, \"_\");\n            let idNote = !!note?.id && note.id !== \"new\" ? note.id : firebase.database().ref(\"usersScience/\" + userEmail).child(\"notes\").push().key;\n\n            let old_editions = isObject(note?.content?.old_editions) ?\n                [...Object.keys(note.content.old_editions).map((keyItem) => { return note.content.old_editions[keyItem] }), data.last_edit]\n                : [data.last_edit];\n\n            console.log(old_editions);\n\n            let postObject = {\n                id: idNote, //Math.floor(Math.random() * 1001),\n                //         title: props.text,\n                //         theme: currentProjectTitle,\n                //         //    //     answer: value,\n                //         comment: currentProjectMediaAndDataAndTemplatesURL, //Тема\n                type: 'sciencenotes',\n                content: { ...data, old_editions, tags },\n                //         quizString: 'Рассчитано по отчетности ' + currentProjectTitle + ' по адресу ' + currentProjectSourseDataURL,\n                deleted: false,\n                email: email,\n                user: user,\n                avatarUrl: !!avatarUrl ? avatarUrl : null,\n                date: new Intl.DateTimeFormat(\"ru\", {\n                    weekday: \"short\",\n                    year: \"numeric\",\n                    month: \"short\",\n                    day: \"numeric\",\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                }).format(new Date()), //Date().toJSON()\n            };\n\n            console.log(postObject);\n\n            var updates = {};\n            updates[\"usersScience/\" + userEmail + \"/notes/\" + idNote] = postObject;\n\n            return firebase.database().ref().update(updates).then(() => {\n                setSavedAnswer(true);\n                setTimeout(window.location.reload(), 8000);\n            });\n\n        }\n    }\n\n\n\n\n    return <FormProvider {...methods}>\n\n        {screenSize === \"large\" ?\n            <Container>\n                <ButtonGroup aria-label=\"Basic example\" size=\"sm\">\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"h1\")}>h1</Button>\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"h2\")}>h2</Button>\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"h3\")}>h3</Button>\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"h4\")}>h4</Button>\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"h5\")}>h5</Button>\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"h6\")}>h6</Button>\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"last_edit\")}>Last Edit</Button>\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"cited_reference\")}>Cited Reference</Button>\n                    <Button variant=\"outline-secondary\" onClick={() => setCurrentField(\"plagiarism\")}>Plagiarism</Button>\n                </ButtonGroup>\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                    {(() => {\n                        switch (currentField) {\n                            case \"h1\": return <ActiveField key={currentField} name={currentField} label={\"Заголовок 1\"} />;\n                            case \"h2\": return <ActiveField key={currentField} name={currentField} label={\"Заголовок 2\"} />;\n                            case \"h3\": return <ActiveField key={currentField} name={currentField} label={\"Заголовок 3\"} />;\n                            case \"h4\": return <ActiveField key={currentField} name={currentField} label={\"Заголовок 4\"} />;\n                            case \"h5\": return <ActiveField key={currentField} name={currentField} label={\"Заголовок 5\"} />;\n                            case \"h6\": return <ActiveField key={currentField} name={currentField} label={\"Заголовок 6\"} />;\n                            case \"last_edit\": return <ActiveField key={currentField} name={currentField} label={\"Текст\"} />;\n                            case \"cited_reference\": return <ActiveField key={currentField} name={currentField} label={\"Источник\"} />;\n                            case \"plagiarism\": return <ActiveField key={currentField} name={currentField} label={\"Уникальность\"} />;\n                        }\n                    })()}\n\n                    {/* <CreatableSelectComponent tags={note.content.tags} updateTags={updateTags} /> */}\n\n                    <Button\n                        variant=\"outline-secondary\"\n                        type=\"submit\"\n                        size=\"sm\"\n                        block\n                        disabled={savedAnswer}\n                    >\n                        Сохранить\n                    </Button>\n                </Form>\n\n\n\n            </Container> :\n            <Container>\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                    <ActiveField name={\"h6\"} label={\"Заголовок\"} />\n                    <ActiveField name={\"last_edit\"} label={\"Текст\"} />\n                    <ActiveField name={'cited_reference'} label={\"Источник\"} />\n                    <ActiveField name={'plagiarism'} label={\"Уникальность\"} />\n                    <Button\n                        variant=\"outline-secondary\"\n                        type=\"submit\"\n                        size=\"sm\"\n                        block\n                        disabled={savedAnswer}\n                    >\n                        Сохранить\n                    </Button>\n\n                </Form>\n\n            </Container>\n        }\n\n\n\n        {/* {formFields.map((item) =>\n                <ActiveField key={item.name} name={item.name} />\n            )} */}\n\n    </FormProvider>\n}\n\nfunction ActiveField({ name, label = null }) {\n    const methods = useFormContext();\n    return <Form.Group controlId={\"field_\" + name}>\n        <Form.Label className=\"small text-muted\">{!!label ? label : name}</Form.Label>\n        <Form.Control\n            {...methods.register(name)}\n            as=\"textarea\"\n            rows=\"3\"\n        />\n        {/* <Form.Text className=\"text-muted\">Пример: =NPV(0.1;100,200,300)-500</Form.Text> */}\n    </Form.Group>\n}\n"],"sourceRoot":""}