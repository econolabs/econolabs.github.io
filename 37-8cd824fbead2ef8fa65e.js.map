{"version":3,"sources":["webpack:///./src/components/HTMLEditorBallonBlockLazy.js"],"names":["HTMLEditorBallonBlockLazy","id","setHtmlfeedback","dispatch","useDispatch","initContent","useSelector","selectTempData","ckeditor_node_content","editor","BalloonEditor","data","onInit","onChange","event","setCKEditorContent","getData","onBlur","onFocus"],"mappings":"4FAAA,0IASe,SAASA,EAAT,GAA6D,IAAD,IAAxBC,UAAwB,MAArB,EAAqB,EAAlBC,EAAkB,EAAlBA,gBAC/CC,EAAWC,cACXC,EAAcC,YAAYC,KAAgBC,sBAGhD,OAAIP,IAFqBK,YAAYC,KAAgBC,sBAI9C,kBAAC,IAAD,CACKC,OAAQC,IACRC,KAAQN,GAA2B,qBAEnCO,OAAQ,SAAAH,KAIRI,SAAU,SAACC,EAAOL,GAGjBN,EAASY,YAAmBN,EAAOO,aAEpCC,OAAQ,SAACH,EAAOL,GACZP,EAAgBO,EAAOO,YAE3BE,QAAS,SAACJ,EAAOL,OAMlB","file":"37-8cd824fbead2ef8fa65e.js","sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\"; \n\nimport { selectTempData, setCKEditorContent } from \"../features/temp/tempSlice\";\n\nimport CKEditor from '@ckeditor/ckeditor5-react';\n//import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport BalloonEditor from '@ckeditor/ckeditor5-build-balloon-block';\n\nexport default function HTMLEditorBallonBlockLazy({id=0, setHtmlfeedback}) {\n    const dispatch = useDispatch();\n    const initContent = useSelector(selectTempData).ckeditor_node_content;\n    const ckeditor_node_id = useSelector(selectTempData).ckeditor_node_content;\n\n    if (id === ckeditor_node_id) { \n\n    return <CKEditor\n                editor={BalloonEditor}\n                data={!!initContent ? initContent :\"<p>Комментарий</p>\"}\n           //     data={!!props.htmlfeedback ? props.htmlfeedback :\"<p>Комментарий</p>\"}\n                onInit={editor => {\n                    // You can store the \"editor\" and use when it is needed.\n                   // console.log('Editor is ready to use!', editor);\n                }}\n                onChange={(event, editor) => {\n                 //   const data = editor.getData();\n                 //   console.log({ event, editor, data });\n                 dispatch(setCKEditorContent(editor.getData()));\n                }}\n                onBlur={(event, editor) => {\n                    setHtmlfeedback(editor.getData());\n                }}\n                onFocus={(event, editor) => {\n             //       console.log('Focus.', editor);\n                }}\n            />\n        }\n   \n        return null\n}\n\n"],"sourceRoot":""}