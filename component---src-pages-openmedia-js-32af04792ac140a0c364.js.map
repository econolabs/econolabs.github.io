{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/openmedia.js"],"names":["Header","siteTitle","className","style","margin","to","color","textDecoration","href","src","alt","verticalAlign","width","height","borderRadius","filter","objectFit","defaultProps","Layout","children","data","useStaticQuery","site","siteMetadata","title","maxWidth","padding","Date","getFullYear","author","OpenMedia","props","useFirebaseNode","location","search","substring","openMediaItem","loading","error","theme","Body","Title","type","datafirenode","content","Text","htmlfeedback","ReactHtmlParser","comment","answer"],"mappings":"0JAIMA,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,yBAAKC,UAAU,kCAAf,IAEE,wBAAIC,MAAO,CAAEC,OAAQ,IACnB,kBAAC,OAAD,CAAMC,GAAG,IAAIF,MAAO,CAAEG,MAAM,OAASC,eAAe,SAAaN,IAEnE,uBAAGC,UAAU,eAAeM,KAAK,8BAC/B,yBACEC,IAAI,4EAGJC,IAAI,GACJP,MAAO,CACLQ,cAAe,SACfC,MAAO,OACPC,OAAQ,OACRC,aAAc,MACdC,OAAQ,kBACRC,UAAW,cAqCrBhB,EAAOiB,aAAe,CACpBhB,UAAU,IAGGD,Q,UCXAkB,IAtCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAOC,yBAAe,cAW5B,OACE,oCACE,kBAAC,EAAD,CAAQpB,UAAWmB,EAAKE,KAAKC,aAAaC,QAC1C,yBACErB,MAAO,CACLC,OAAO,SACPqB,SAAU,IACVC,QAAS,SAGX,8BAAOP,GACP,gCACE,0BAAMhB,MAAO,CAACG,MAAO,aAArB,MACG,IAAIqB,MAAOC,cADd,KAC+B,IAC/B,uBAAGpB,KAAK,6BAA6BL,MAAO,CAACG,MAAO,aAAcc,EAAKE,KAAKC,aAAaM,c,kCCxCnG,yJAYe,SAASC,EAAUC,GAEhC,MAAgDC,YAAgB,aAAeD,EAAME,SAASC,OAAOC,UAAU,IAAjGC,EAAd,EAAQhB,KAAqBiB,EAA7B,EAA6BA,QAASC,EAAtC,EAAsCA,MAEtC,OAAMD,IAAYD,EAAwB,kBAAC,IAAD,YACpCE,EAAgB,kBAAC,IAAD,YAMpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMpC,UAAU,MAAMC,MAAO,CAAEsB,SAAU,WACrC,kBAAC,IAAKzB,OAAN,KAAcoC,aAAd,EAAcA,EAAeG,OAC7B,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAKC,MAAN,KAAaL,aAAb,EAAaA,EAAeZ,OACH,WAAxBY,aAAA,EAAAA,EAAeM,MACZ,kBAAC,IAAD,CAAWC,aAAc,kBAAkBP,aAAlB,EAAkBA,EAAeQ,WAAe,KAE7E,kBAAC,IAAKC,KAAN,MAAYT,aAAA,EAAAA,EAAeU,eAAgB,8BAAOC,IAAgBX,aAAD,EAACA,EAAeU,gBACjF,kBAAC,IAAKD,KAAN,KAAY,wCAAsC,iBAAxBT,aAAA,EAAAA,EAAeM,MAAyBK,IAAgBX,aAAD,EAACA,EAAeY,SAAWD,IAAgBX,aAAD,EAACA,EAAea","file":"component---src-pages-openmedia-js-32af04792ac140a0c364.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <nav className=\"navbar  navbar-light bg-light \"> {/* navbar-dark bg-primary */}\n\n    <h3 style={{ margin: 0 }}>\n      <Link to=\"/\" style={{ color: `gray`, textDecoration: `none`, }}>{siteTitle}</Link>\n    </h3>\n    <a className=\"navbar-brand\" href=\"https://vk.com/id151078439\">\n      <img\n        src=\"https://sun9-37.userapi.com/c317630/v317630439/76a0/Bz6QTfBog0I.jpg?ava=1\"\n        //  width=\"30\"\n        //  height=\"45\"\n        alt=\"\"\n        style={{\n          verticalAlign: 'middle',\n          width: '40px',\n          height: '40px',\n          borderRadius: '50%',\n          filter: 'grayscale(100%)',\n          objectFit: 'cover'\n        }} />\n    </a>\n  </nav>\n\n  // <header\n  //   style={{\n  //     background: `rebeccapurple`,\n  //     marginBottom: `1.45rem`,\n  //   }}\n  // >\n  //   <div\n  //     style={{\n  //       margin: `0 auto`,\n  //       maxWidth: 960,\n  //       padding: `1.45rem 1.0875rem`,\n  //     }}\n  //   >\n  //     <h1 style={{ margin: 0 }}>\n  //       <Link\n  //         to=\"/\"\n  //         style={{\n  //           color: `white`,\n  //           textDecoration: `none`,\n  //         }}\n  //       >\n  //         {siteTitle}\n  //       </Link>\n  //     </h1>\n  //   </div>\n  // </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 800,\n          padding: '2rem'\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          <span style={{color: 'darkgray'}}>\n          © {new Date().getFullYear()}, {\" \"}\n          <a href=\"https://vk.com/id151078439\" style={{color: 'darkgray'}}>{data.site.siteMetadata.author}</a>\n          </span>         \n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\n\nimport Layout from \"../components/layout\";\nimport ShowMedia from \"../mediatemplates/ShowMedia\";\n\n import ReactHtmlParser from 'react-html-parser'; \n\n import Container from \"react-bootstrap/Container\";\n import Card from \"react-bootstrap/Card\";\n\n\nexport default function OpenMedia(props) {\n\n  const { data: openMediaItem, loading, error } = useFirebaseNode(\"openmedia/\" + props.location.search.substring(1));\n\n  if (!!loading || !openMediaItem) { return <Layout>...</Layout> }\n  if (!!error) { return <Layout>:-(</Layout> }\n\n//  console.log(props.location.search.substring(1));\n//  console.log(openMediaItem);\n\n  return (\n    <Layout>\n      <Container>\n        <Card className=\"m-3\" style={{ maxWidth: '1000px' }}>\n            <Card.Header>{openMediaItem?.theme}</Card.Header>\n            <Card.Body>\n                <Card.Title>{openMediaItem?.title}</Card.Title>\n                {openMediaItem?.type === \"media\" ? (\n                    <ShowMedia datafirenode={\"openmediadata/\" +openMediaItem?.content} />) : null}\n\n                <Card.Text>{openMediaItem?.htmlfeedback && <span>{ReactHtmlParser(openMediaItem?.htmlfeedback)}</span>}</Card.Text> \n                <Card.Text>{<span>Ответ: {openMediaItem?.type === \"calculation\" ? ReactHtmlParser(openMediaItem?.comment) : ReactHtmlParser(openMediaItem?.answer)}</span>}</Card.Text>  \n                         \n            </Card.Body>\n        </Card>\n    </Container>\n\n      \n      {/*   <div key={theme}>\n              <Alert variant=\"primary\">{theme}</Alert>\n              {data\n                .filter((quiz) => quiz.theme === theme)\n                .map((quiz) => {\n                  return (\n                    <div key={quiz.id}>\n                      <Alert variant=\"secondary\" className=\"mt-3\">\n                        {!!quiz.avatarUrl ? (\n                          <img\n                            src={quiz.avatarUrl}\n                            alt=\"\"\n                            className=\"m-2\"\n                            style={{\n                              verticalAlign: \"middle\",\n                              width: \"50px\",\n                              height: \"50px\",\n                              borderRadius: \"50%\",\n                              filter: \"grayscale(100%)\",\n                              objectFit: \"cover\",\n                            }}\n                          />\n                        ) : null}\n                        {quiz.title}\n                      </Alert>\n                      <div>\n                      {ReactHtmlParser(quiz.quizString +\n                          `<br>\n                          <span>Ответ: ${quiz.type === \"calculation\" ? quiz.comment : quiz.answer}</span>\n                          <span class=\"ml-5\">Дата/время: ${quiz.date}</span><br>\n                          ${!!quiz.user ? \"Решено: \" + quiz.user : \"\"}\n                          `)}  \n                      </div>      \n                 \n                      \n                    {quiz?.htmlfeedback && <div>{ReactHtmlParser(quiz.htmlfeedback)}</div>}\n\n                      {quiz.type === \"spreadsheet\" && !!quiz?.content && <ShowXlTableArrayOfArrays xlArray={createProtoArray(quiz.content, 0, 0)}/>}\n\n                      {quiz.type === \"calculation\" && <ShowXlTableWithPredefinedIndicators quiz={quiz} xlArray={createProtoArray(quiz.content, 0, 0)}/>}\n\n                      {quiz.type === \"chartwithpredefineddictionarydata\" && <PrepareDataFromDictionaryForChart quiz={quiz}/>}\n                    \n                    </div>\n                  );\n                })}\n            </div>\n          ))}\n      </div> */}\n    </Layout>\n  );\n}\n\n"],"sourceRoot":""}