{"version":3,"sources":["webpack:///./src/pages/currentlaboratory.js","webpack:///./src/mediatemplates/ShowXlTableWithPredefinedIndicators.js"],"names":["currentDay","Intl","DateTimeFormat","weekday","year","month","day","format","Date","replace","CurrentLaboratory","useFirebaseNode","usersProjects","data","loading","error","currentCases","Object","keys","map","item","console","log","sort","a","b","timeA","timestamp","timeB","uniqueTitles","Set","title","key","variant","length","filter","id","Header","avatarUrl","src","alt","className","style","verticalAlign","width","height","borderRadius","objectFit","email","theme","Body","Text","itemString","answer","toString","startsWith","comment","includes","ReactHtmlParser","type","content","xlArray","createProtoArray","quiz","deleted","firenode","mediaItem","datafirenode","records","mediaItems","ShowXlTableWithPredefinedIndicators","projectData","projectDataArray","tableWithData","doFindValuesForArrayOfArraysTable","striped","bordered","hover","size","column","columnIndex","row","rowIndex"],"mappings":"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","file":"component---src-pages-currentlaboratory-js-ebc06e628226ca281057.js","sourcesContent":["import React from \"react\";\n\nimport ReactHtmlParser from 'react-html-parser';\n\nimport UserAvatar from \"../mediatemplates/UserAvatar\"\n\nimport ShowXlTableArrayOfArrays from \"../mediatemplates/ShowXlTableArrayOfArrays\";\nimport { GetReadyProcessBalanceStackedBars } from \"../mediatemplates/PrepareDataFromDictionaryForChart\";\nimport ShowXlTableWithPredefinedIndicators from \"../mediatemplates/ShowXlTableWithPredefinedIndicators\";\nimport ShowMedia, { GetSeriesCategoriesOptionsForApexChart, GetReadyScatterApexChart, GetReadyDatalineQuotesApexChart } from \"../mediatemplates/ShowMedia\";\nimport MediaTemplatesAccountingWithProfitsCash from \"../mediatemplates/MediaTemplatesAccountingWithProfitsCash\";\n\nimport { createProtoArray } from \"../features/spreadsheet/spreadsheetSlice\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\n\nimport Alert from 'react-bootstrap/Alert'\nimport Card from 'react-bootstrap/Card'\n\nimport Layout from \"../components/layout\"\n\nlet currentDay = new Intl.DateTimeFormat(\"en\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\"\n}).format(new Date()).replace(/[^a-zA-Z0-9]/g, \"_\");\n\nexport default function CurrentLaboratory() {\n    // const { data: usersProjects, loading, error } = useFirebaseNode('currentLaboratoryDay/' + currentDay + '/cases/');\n    const { data: usersProjects, loading, error } = useFirebaseNode(\"/currentDay/\" + currentDay + '/cases/');\n\n\n    if (!!loading || !usersProjects) { return <Layout><div>...</div></Layout> }\n    if (!!error) { return <Layout>:-(</Layout> }\n\n    let currentCases = Object.keys(usersProjects).map(item => { return usersProjects[item] });\n    console.log(currentCases);\n\n    currentCases.sort(function (a, b) {\n        var timeA = !!a?.timestamp ? a.timestamp : 0;\n        var timeB = !!b?.timestamp ? b.timestamp : 0;\n        if (timeA > timeB) {\n            return -1;\n        }\n        if (timeA < timeB) {\n            return 1;\n        }\n        return 0;\n    });\n\n    const uniqueTitles = !!currentCases ? [...new Set(currentCases.map((item) => item.title))] : [];\n\n  //  console.log(uniqueTitles);\n\n    return <Layout>\n        <div>     {!!uniqueTitles &&\n            uniqueTitles.map((title) => (\n                <div key={title}>\n                    <Alert variant=\"primary\">{title}</Alert>\n\n                    {!!currentCases && currentCases.length > 0 && currentCases.filter(item => item.title === title).map(item =>\n                        <Card key={item.id}>\n                            <Card.Header>\n                                {!!item.avatarUrl ? (\n                                    <img\n                                        src={item.avatarUrl}\n                                        alt=\"\"\n                                        className=\"m-2\"\n                                        style={{\n                                            verticalAlign: \"middle\",\n                                            width: \"50px\",\n                                            height: \"50px\",\n                                            borderRadius: \"50%\",\n                                            filter: \"grayscale(100%)\",\n                                            objectFit: \"cover\",\n                                        }}\n                                    />\n                                ) :  <UserAvatar email={item.email}/>  }\n                                <small>{item.theme}</small>\n\n                            </Card.Header>\n                            <Card.Body>\n                                {/* <Card.Title>{item.theme}</Card.Title> */}\n                                <Card.Text>   <small>{item.itemString}</small></Card.Text>\n                                {!!item?.answer && !(item.answer.toString().startsWith('-M')) ? <Card.Text>   <small>Ответ: {\" \"}{item.answer}</small></Card.Text> : null}\n                                {!!item.comment.includes('__') ? null :  <Card.Text><small>{ReactHtmlParser(item.comment)}</small></Card.Text> }\n                                 \n                                {item.type === \"spreadsheet\" && !!item?.content && <ShowXlTableArrayOfArrays xlArray={createProtoArray(item.content, 0, 0)} />}\n                                {item.type === \"balancestackedbars\" && <GetReadyProcessBalanceStackedBars quiz={item} />}\n\n                                {(item.type === \"datetimebarapexchart\" || item.type === \"datetimelineapexchart\" ||\n                                    item.type === \"arraycategorieslineapexchart\" || item.type === \"arraycategoriesbarapexchart\")\n                                    && item?.deleted !== true && <GetSeriesCategoriesOptionsForApexChart firenode={item.content} mediaItem={item.type} />\n                                }\n\n                                {(item.type === \"html\" || item.type === \"markdown\") && <div>{ReactHtmlParser(item.content)}</div>}\n\n                                {(item.type === \"scatterquotesapexchart\" || item.type === \"scatterquotesapexchartoptions\" ||\n                                    item.type === \"scatterapexchart\") && item?.deleted !== true && <GetReadyScatterApexChart firenode={item.content} />\n                                }\n\n                                {(item.type === \"datalinequotesapexchart\" || item.type === \"datalinequotesapexchartoptions\" ||\n                                    item.type === \"datetimeareanocategoriesapexchart\") && item?.deleted !== true && <GetReadyDatalineQuotesApexChart firenode={item.content} />\n                                }\n\n\n                                {item.type === \"media\" ? <ShowMedia datafirenode={\"/usersCraft/\" + item.email.replace(/[^a-zA-Z0-9]/g, \"_\") + \"/data/\" + item.content} /> : null}\n\n                                {item.type === \"accountingwithprofitscash\" ? <MediaTemplatesAccountingWithProfitsCash records={item.content} mediaItems={item.mediaItems} /> : null}\n\n                            </Card.Body>\n                        </Card>\n                    )}\n\n\n                </div>\n            ))}</div>\n\n    </Layout>\n}\n\n","import React from \"react\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\n\nimport { doFindValuesForArrayOfArraysTable } from \"../features/data/dataSlice\";\n\nimport Table from \"react-bootstrap/Table\";\n\n\n\nexport default function ShowXlTableWithPredefinedIndicators({ quiz, xlArray }) {\n  const { data: projectData, loading, error } = useFirebaseNode('openmediadata/' + quiz.answer);\n\n  if (!!loading || !projectData) { return <div>...</div> }\n  if (!!error) { return <div>:-(</div> }\n\n  let projectDataArray = Object.keys(projectData)\n    .map((item) => { return projectData[item] })\n\n  // console.log(quiz);\n  // console.log(projectDataArray);\n\n  let tableWithData = doFindValuesForArrayOfArraysTable(projectDataArray, xlArray);\n  // console.log(tableWithData);\n\n\n  return <Table striped bordered hover size=\"sm\">\n    <thead>\n      <tr>\n        {tableWithData[0].map((column, columnIndex) => (\n          <th key={columnIndex} className=\"text-center\">\n            {tableWithData[0][columnIndex]}\n          </th>\n        ))}\n      </tr>\n    </thead>\n    <tbody>\n      {tableWithData.map((row, rowIndex) => {\n        if (rowIndex > 0) {\n          return <tr key={rowIndex}>\n            {row.map((column, columnIndex) => (\n              <td key={rowIndex + columnIndex} >\n            <small className={\"ml-1\"}> {row[columnIndex]}</small>   {/* <small>{row[columnIndex]}</small>  */}\n              </td>\n            ))}\n          </tr>\n        }\n      })}\n    </tbody>\n  </Table>\n}\n\n\n"],"sourceRoot":""}