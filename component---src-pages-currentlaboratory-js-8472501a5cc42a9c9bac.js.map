{"version":3,"sources":["webpack:///./src/pages/currentlaboratory.js","webpack:///./src/mediatemplates/ShowXlTableWithPredefinedIndicators.js"],"names":["clothType","variants","Math","floor","random","length","clotheColor","hairColor","currentDay","Intl","DateTimeFormat","weekday","year","month","day","format","Date","replace","CurrentLaboratory","useFirebaseNode","usersProjects","data","loading","error","projectUrls","Object","keys","map","item","console","log","project","projectIndex","ProjectLayout","key","projectUrl","projectForms","projectMeta","variant","theme","className","avatarUrl","src","alt","data-toggle","data-placement","style","verticalAlign","width","height","borderRadius","filter","objectFit","avatarStyle","topType","accessoriesType","facialHairType","clotheType","eyeType","eyebrowType","mouthType","skinColor","user","date","content","quizString","projectCalculation","ProjectForm","formUrl","formMeta","ReactHtmlParser","title","comment","htmlfeedback","quiz","xlArray","createProtoArray","ShowXlTableWithPredefinedIndicators","answer","projectData","projectDataArray","tableWithData","doFindValuesForArrayOfArraysTable","striped","bordered","hover","size","column","columnIndex","row","rowIndex"],"mappings":"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","file":"component---src-pages-currentlaboratory-js-8472501a5cc42a9c9bac.js","sourcesContent":["import React from \"react\";\nimport ReactHtmlParser from 'react-html-parser';\n\nimport ShowXlTableWithPredefinedIndicators from \"../mediatemplates/ShowXlTableWithPredefinedIndicators\";\nimport { createProtoArray } from \"../features/spreadsheet/spreadsheetSlice\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\nimport Avatar from 'avataaars'\n\nimport Alert from 'react-bootstrap/Alert'\n\n\nimport Layout from \"../components/layout\"\n\nfunction topType() {\n    let variants = [\"NoHair\", \"Eyepatch\", \"Hat\", \"Hijab\", \"Turban\", \"WinterHat1\", \"WinterHat2\", \"WinterHat3\", \"WinterHat4\", \"LongHairBigHair\", \"LongHairBob\", \"LongHairBun\", \"LongHairCurly\", \"LongHairCurvy\", \"LongHairDreads\", \"LongHairFrida\", \"LongHairFro\", \"LongHairFroBand\", \"LongHairNotTooLong\", \"LongHairShavedSides\", \"LongHairMiaWallace\", \"LongHairStraight\", \"LongHairStraight2\", \"LongHairStraightStrand\", \"ShortHairDreads01\", \"ShortHairDreads02\", \"ShortHairFrizzle\", \"ShortHairShaggyMullet\", \"ShortHairShortCurly\", \"ShortHairShortFlat\", \"ShortHairShortRound\", \"ShortHairShortWaved\", \"ShortHairSides\", \"ShortHairTheCaesar\", \"ShortHairTheCaesarSidePart\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction clothType() {\n    let variants = [\"BlazerShirt\", \"BlazerSweater\", \"CollarSweater\", \"GraphicShirt\", \"Hoodie\", \"Overall\", \"ShirtCrewNeck\", \"ShirtScoopNeck\", \"ShirtVNeck\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction clotheColor() {\n    let variants = [\"Black\", \"Blue01\", \"Blue02\", \"Blue03\", \"Gray01\", \"Gray02\", \"Heather\", \"PastelBlue\", \"PastelGreen\", \"PastelOrange\", \"PastelRed\", \"PastelYellow\", \"Pink\", \"Red\", \"White\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction hairColor() {\n    let variants = [\"Auburn\", \"Black\", \"Blonde\", \"BlondeGolden\", \"Brown\", \"BrownDark\", \"Platinum\", \"Red\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nlet currentDay = new Intl.DateTimeFormat(\"en\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\"\n}).format(new Date()).replace(/[^a-zA-Z0-9]/g, \"_\");\n\nexport default function CurrentLaboratory() {\n    const { data: usersProjects, loading, error } = useFirebaseNode('currentLaboratoryDay/' + currentDay + '/projects/');\n\n    if (!!loading || !usersProjects) { return <Layout><div>...</div></Layout> }\n    if (!!error) { return <Layout>:-(</Layout> }\n\n    let projectUrls = Object.keys(usersProjects).map(item => { return item });\n    console.log(projectUrls);\n\n    // data.sort(function (a, b) {\n    //     var timeA = !!a?.timestamp ? a.timestamp : 0;\n    //     var timeB = !!b?.timestamp ? b.timestamp : 0;\n    //     if (timeA > timeB) {\n    //         return -1;\n    //     }\n    //     if (timeA < timeB) {\n    //         return 1;\n    //     }\n    //     return 0;\n    // });\n\n    // console.log(data);\n\n    // let uniqueUsers = !!data ? [...new Set(data.map(item => item.user))] : []; // [ 'A', 'B']\n    // console.log(uniqueUsers);\n    // let usersProgress = uniqueUsers.map(user => {\n    //     return { user: user, doneTasks: [...new Set(data.filter(quiz => quiz.user === user).map(userquiz => userquiz.title))].length }\n    // });\n    // console.log(usersProgress);\n\n\n    // const uniqueTitles = !!data ? [...new Set(data.map(item => item.title))] : []; // [ 'A', 'B']\n\n    return <Layout>\n\n        {projectUrls.map((project, projectIndex) => {\n            console.log(project)\n            return <div >\n                <ProjectLayout key={projectIndex} projectUrl={project} projectForms={Object.keys(usersProjects[project]).map(item => { return [item] })} />\n            </div>\n        })}     \n    </Layout>\n}\n\n\nfunction ProjectLayout({ projectUrl, projectForms }) {\n    const { data: projectMeta, loading, error } = useFirebaseNode('openmedia/' + projectUrl);\n\n\n    if (!!loading || !projectMeta) { return <div>...</div> }\n    if (!!error) { return <div>:-(</div> }\n\n\n    return <div>\n        <Alert variant=\"primary\">{projectMeta.theme}</Alert>\n\n        <div className=\"media border p-3 mb-5\">\n        {!!projectMeta?.avatarUrl ?\n                                <img\n                                    src={projectMeta.avatarUrl} alt=\"\" className=\"m-3\" data-toggle=\"tooltip\" data-placement=\"bottom\"\n                                    style={{ verticalAlign: 'middle', width: '60px', height: '60px', borderRadius: '50%', filter: 'grayscale(100%)', objectFit: 'cover' }} />\n                                :\n                                <span data-toggle=\"tooltip\" data-placement=\"bottom\">\n                                    <Avatar\n                                        style={{ width: '60px', height: '60px' }}\n                                        avatarStyle='Circle'\n                                        topType={topType()}\n                                        accessoriesType='Prescription02'\n                                        hairColor={hairColor()}\n                                        facialHairType='Blank'\n                                        clotheType={clothType()}\n                                        clotheColor={clotheColor()}\n                                        eyeType='Happy'\n                                        eyebrowType='Default'\n                                        mouthType='Smile'\n                                        skinColor='Light'\n                                    />\n                                </span>\n                            }\n\n            {/* <img\n                src={projectMeta.avatarUrl}\n                alt=\"\"\n                className=\"m-3\"\n                style={{\n                    verticalAlign: \"middle\",\n                    width: \"60px\",\n                    height: \"60px\",\n                    borderRadius: \"50%\",\n                    filter: \"grayscale(100%)\",\n                    objectFit: \"cover\",\n                }}\n            /> */}\n            <div className=\"media-body\">\n                <h4>\n                    {projectMeta.user}{\" \"}\n                    <small>\n                        <i>\n                            {projectMeta.date}\n                        </i>\n                    </small>\n                </h4>\n                <p>{projectMeta.content}{\" \"} {projectMeta.quizString}</p>\n            </div>\n        </div>\n        <div>{projectForms.map(projectCalculation => <ProjectForm formUrl={projectCalculation} />)} </div>\n    </div>\n}\n\nfunction ProjectForm({ formUrl }) {\n    const { data: formMeta, loading, error } = useFirebaseNode('/usersTemplates/calculations/' + formUrl);\n\n    if (!!loading || !formMeta) { return <div>...</div> }\n    if (!!error) { return <div>:-(</div> }\n\n    return <div>\n        <div>{ReactHtmlParser(\n            formMeta.title + '<br><small>' +\n            formMeta.quizString + '</small><br><small>' +\n            formMeta.comment + '</small><br>' +\n            '<small>Дата/время: ' + formMeta.date + '<small><br>')}\n        </div>\n        <div>{formMeta?.htmlfeedback && <div>{ReactHtmlParser(formMeta.htmlfeedback)}</div>}</div>\n        <ShowXlTableWithPredefinedIndicators quiz={formMeta} xlArray={createProtoArray(formMeta.content, 0, 0)} />\n\n    </div>\n\n\n\n}","import React from \"react\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\n\nimport { doFindValuesForArrayOfArraysTable } from \"../features/data/dataSlice\";\n\nimport Table from \"react-bootstrap/Table\";\n\n\n\nexport default function ShowXlTableWithPredefinedIndicators({ quiz, xlArray }) {\n  const { data: projectData, loading, error } = useFirebaseNode('openmediadata/' + quiz.answer);\n\n  if (!!loading || !projectData) { return <div>...</div> }\n  if (!!error) { return <div>:-(</div> }\n\n  let projectDataArray = Object.keys(projectData)\n    .map((item) => { return projectData[item] })\n\n  // console.log(quiz);\n  // console.log(projectDataArray);\n\n  let tableWithData = doFindValuesForArrayOfArraysTable(projectDataArray, xlArray);\n  // console.log(tableWithData);\n\n\n  return <Table striped bordered hover size=\"sm\">\n    <thead>\n      <tr>\n        {tableWithData[0].map((column, columnIndex) => (\n          <th key={columnIndex} className=\"text-center\">\n            {tableWithData[0][columnIndex]}\n          </th>\n        ))}\n      </tr>\n    </thead>\n    <tbody>\n      {tableWithData.map((row, rowIndex) => {\n        if (rowIndex > 0) {\n          return <tr key={rowIndex}>\n            {row.map((column, columnIndex) => (\n              <td key={rowIndex + columnIndex}>\n               {row[columnIndex]} {/* <small>{row[columnIndex]}</small>  */}\n              </td>\n            ))}\n          </tr>\n        }\n      })}\n    </tbody>\n  </Table>\n}\n\n\n"],"sourceRoot":""}