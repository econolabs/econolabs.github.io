{"version":3,"sources":["webpack:///./src/pages/currentlaboratory.js","webpack:///./src/mediatemplates/ShowXlTableWithPredefinedIndicators.js"],"names":["currentDay","Intl","DateTimeFormat","weekday","year","month","day","format","Date","replace","CurrentLaboratory","useFirebaseNode","usersProjects","data","loading","error","currentCases","Object","keys","map","item","console","log","sort","a","b","timeA","timestamp","timeB","uniqueTitles","Set","title","key","variant","length","filter","id","Header","avatarUrl","src","alt","className","style","verticalAlign","width","height","borderRadius","objectFit","theme","Body","Text","itemString","answer","type","content","xlArray","createProtoArray","deleted","firenode","mediaItem","ReactHtmlParser","datafirenode","email","records","mediaItems","ShowXlTableWithPredefinedIndicators","quiz","projectData","projectDataArray","tableWithData","doFindValuesForArrayOfArraysTable","striped","bordered","hover","size","column","columnIndex","row","rowIndex"],"mappings":"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","file":"component---src-pages-currentlaboratory-js-e151576154b472ab700b.js","sourcesContent":["import React from \"react\";\n\nimport ReactHtmlParser from 'react-html-parser';\n\nimport ShowXlTableArrayOfArrays from \"../mediatemplates/ShowXlTableArrayOfArrays\";\nimport { GetReadyProcessBalanceStackedBars } from \"../mediatemplates/PrepareDataFromDictionaryForChart\";\nimport ShowXlTableWithPredefinedIndicators from \"../mediatemplates/ShowXlTableWithPredefinedIndicators\";\nimport ShowMedia, { GetSeriesCategoriesOptionsForApexChart, GetReadyScatterApexChart, GetReadyDatalineQuotesApexChart } from \"../mediatemplates/ShowMedia\";\nimport MediaTemplatesAccountingWithProfitsCash from \"../mediatemplates/MediaTemplatesAccountingWithProfitsCash\";\n\nimport { createProtoArray } from \"../features/spreadsheet/spreadsheetSlice\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\nimport Avatar from 'avataaars'\n\nimport Alert from 'react-bootstrap/Alert'\nimport Card from 'react-bootstrap/Card'\n\n\n\nimport Layout from \"../components/layout\"\n\nfunction topType() {\n    let variants = [\"NoHair\", \"Eyepatch\", \"Hat\", \"Hijab\", \"Turban\", \"WinterHat1\", \"WinterHat2\", \"WinterHat3\", \"WinterHat4\", \"LongHairBigHair\", \"LongHairBob\", \"LongHairBun\", \"LongHairCurly\", \"LongHairCurvy\", \"LongHairDreads\", \"LongHairFrida\", \"LongHairFro\", \"LongHairFroBand\", \"LongHairNotTooLong\", \"LongHairShavedSides\", \"LongHairMiaWallace\", \"LongHairStraight\", \"LongHairStraight2\", \"LongHairStraightStrand\", \"ShortHairDreads01\", \"ShortHairDreads02\", \"ShortHairFrizzle\", \"ShortHairShaggyMullet\", \"ShortHairShortCurly\", \"ShortHairShortFlat\", \"ShortHairShortRound\", \"ShortHairShortWaved\", \"ShortHairSides\", \"ShortHairTheCaesar\", \"ShortHairTheCaesarSidePart\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction clothType() {\n    let variants = [\"BlazerShirt\", \"BlazerSweater\", \"CollarSweater\", \"GraphicShirt\", \"Hoodie\", \"Overall\", \"ShirtCrewNeck\", \"ShirtScoopNeck\", \"ShirtVNeck\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction clotheColor() {\n    let variants = [\"Black\", \"Blue01\", \"Blue02\", \"Blue03\", \"Gray01\", \"Gray02\", \"Heather\", \"PastelBlue\", \"PastelGreen\", \"PastelOrange\", \"PastelRed\", \"PastelYellow\", \"Pink\", \"Red\", \"White\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction hairColor() {\n    let variants = [\"Auburn\", \"Black\", \"Blonde\", \"BlondeGolden\", \"Brown\", \"BrownDark\", \"Platinum\", \"Red\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nlet currentDay = new Intl.DateTimeFormat(\"en\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\"\n}).format(new Date()).replace(/[^a-zA-Z0-9]/g, \"_\");\n\nexport default function CurrentLaboratory() {\n    const { data: usersProjects, loading, error } = useFirebaseNode('currentLaboratoryDay/' + currentDay + '/cases/');\n\n    if (!!loading || !usersProjects) { return <Layout><div>...</div></Layout> }\n    if (!!error) { return <Layout>:-(</Layout> }\n\n    let currentCases = Object.keys(usersProjects).map(item => { return usersProjects[item] });\n    console.log(currentCases);\n\n    currentCases.sort(function (a, b) {\n        var timeA = !!a?.timestamp ? a.timestamp : 0;\n        var timeB = !!b?.timestamp ? b.timestamp : 0;\n        if (timeA > timeB) {\n            return -1;\n        }\n        if (timeA < timeB) {\n            return 1;\n        }\n        return 0;\n    });\n\n    const uniqueTitles = !!currentCases ? [...new Set(currentCases.map((item) => item.title))] : [];\n\n    console.log(uniqueTitles);\n\n    // data.sort(function (a, b) {\n    //     var timeA = !!a?.timestamp ? a.timestamp : 0;\n    //     var timeB = !!b?.timestamp ? b.timestamp : 0;\n    //     if (timeA > timeB) {\n    //         return -1;\n    //     }\n    //     if (timeA < timeB) {\n    //         return 1;\n    //     }\n    //     return 0;\n    // });\n\n    // console.log(data);\n\n    // let uniqueUsers = !!data ? [...new Set(data.map(item => item.user))] : []; // [ 'A', 'B']\n    // console.log(uniqueUsers);\n    // let usersProgress = uniqueUsers.map(user => {\n    //     return { user: user, doneTasks: [...new Set(data.filter(item => item.user === user).map(useritem => useritem.title))].length }\n    // });\n    // console.log(usersProgress);\n\n\n    // const uniqueTitles = !!data ? [...new Set(data.map(item => item.title))] : []; // [ 'A', 'B']\n\n    return <Layout>\n\n        <div>     {!!uniqueTitles &&\n            uniqueTitles.map((title) => (\n                <div key={title}>\n                    <Alert variant=\"primary\">{title}</Alert>\n\n                    {!!currentCases && currentCases.length > 0 && currentCases.filter(item => item.title === title).map(item =>\n                        <Card key={item.id}>\n                            <Card.Header>\n                                {!!item.avatarUrl ? (\n                                    <img\n                                        src={item.avatarUrl}\n                                        alt=\"\"\n                                        className=\"m-2\"\n                                        style={{\n                                            verticalAlign: \"middle\",\n                                            width: \"50px\",\n                                            height: \"50px\",\n                                            borderRadius: \"50%\",\n                                            filter: \"grayscale(100%)\",\n                                            objectFit: \"cover\",\n                                        }}\n                                    />\n                                ) : null}\n                                <small>{item.theme}</small>\n\n                            </Card.Header>\n                            <Card.Body>\n                                {/* <Card.Title>{item.theme}</Card.Title> */}\n                                <Card.Text>   <small>{item.itemString}</small></Card.Text>\n                                <Card.Text><small>Ответ: {\" \"}{item.answer}</small></Card.Text>\n                                {item.type === \"spreadsheet\" && !!item?.content && <ShowXlTableArrayOfArrays xlArray={createProtoArray(item.content, 0, 0)} />}\n                                {item.type === \"balancestackedbars\" && <GetReadyProcessBalanceStackedBars item={item} />}\n\n                                {(item.type === \"datetimebarapexchart\" || item.type === \"datetimelineapexchart\" ||\n                                    item.type === \"arraycategorieslineapexchart\" || item.type === \"arraycategoriesbarapexchart\")\n                                    && item?.deleted !== true && <GetSeriesCategoriesOptionsForApexChart firenode={item.content} mediaItem={item.type} />\n                                }\n\n                                {(item.type === \"html\" || item.type === \"markdown\") && <div>{ReactHtmlParser(item.content)}</div>}\n\n                                {(item.type === \"scatterquotesapexchart\" || item.type === \"scatterquotesapexchartoptions\" ||\n                                    item.type === \"scatterapexchart\") && item?.deleted !== true && <GetReadyScatterApexChart firenode={item.content} />\n                                }\n\n                                {(item.type === \"datalinequotesapexchart\" || item.type === \"datalinequotesapexchartoptions\" ||\n                                    item.type === \"datetimeareanocategoriesapexchart\") && item?.deleted !== true && <GetReadyDatalineQuotesApexChart firenode={item.content} />\n                                }\n\n\n                                {item.type === \"media\" ? <ShowMedia datafirenode={\"/usersCraft/\" + item.email.replace(/[^a-zA-Z0-9]/g, \"_\") + \"/data/\" + item.content} /> : null}\n\n                                {item.type === \"accountingwithprofitscash\" ? <MediaTemplatesAccountingWithProfitsCash records={item.content} mediaItems={item.mediaItems} /> : null}\n\n                            </Card.Body>\n                        </Card>\n                    )}\n\n\n                </div>\n            ))}</div>\n\n    </Layout>\n}\n\n","import React from \"react\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\n\nimport { doFindValuesForArrayOfArraysTable } from \"../features/data/dataSlice\";\n\nimport Table from \"react-bootstrap/Table\";\n\n\n\nexport default function ShowXlTableWithPredefinedIndicators({ quiz, xlArray }) {\n  const { data: projectData, loading, error } = useFirebaseNode('openmediadata/' + quiz.answer);\n\n  if (!!loading || !projectData) { return <div>...</div> }\n  if (!!error) { return <div>:-(</div> }\n\n  let projectDataArray = Object.keys(projectData)\n    .map((item) => { return projectData[item] })\n\n  // console.log(quiz);\n  // console.log(projectDataArray);\n\n  let tableWithData = doFindValuesForArrayOfArraysTable(projectDataArray, xlArray);\n  // console.log(tableWithData);\n\n\n  return <Table striped bordered hover size=\"sm\">\n    <thead>\n      <tr>\n        {tableWithData[0].map((column, columnIndex) => (\n          <th key={columnIndex} className=\"text-center\">\n            {tableWithData[0][columnIndex]}\n          </th>\n        ))}\n      </tr>\n    </thead>\n    <tbody>\n      {tableWithData.map((row, rowIndex) => {\n        if (rowIndex > 0) {\n          return <tr key={rowIndex}>\n            {row.map((column, columnIndex) => (\n              <td key={rowIndex + columnIndex} >\n            <small className={\"ml-1\"}> {row[columnIndex]}</small>   {/* <small>{row[columnIndex]}</small>  */}\n              </td>\n            ))}\n          </tr>\n        }\n      })}\n    </tbody>\n  </Table>\n}\n\n\n"],"sourceRoot":""}