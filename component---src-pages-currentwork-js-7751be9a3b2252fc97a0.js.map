{"version":3,"sources":["webpack:///./src/pages/currentwork.js"],"names":["clothType","variants","Math","floor","random","length","clotheColor","hairColor","currentDay","Intl","DateTimeFormat","weekday","year","month","day","format","Date","replace","Currentwork","useFirebaseNode","usersQuizes","data","loading","error","Object","keys","map","item","console","log","sort","a","b","timeA","timestamp","timeB","uniqueUsers","Set","user","usersProgress","doneTasks","filter","quiz","userquiz","title","uniqueTitles","titleIndex","key","className","Header","Body","quizWithTitle","quizIndex","avatarUrl","src","alt","data-toggle","data-placement","style","verticalAlign","width","height","borderRadius","objectFit","avatarStyle","topType","accessoriesType","facialHairType","clotheType","eyeType","eyebrowType","mouthType","skinColor"],"mappings":"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","file":"component---src-pages-currentwork-js-7751be9a3b2252fc97a0.js","sourcesContent":["import React from \"react\";\nimport { useFirebaseNode } from \"../hooks/useFirebaseNode\";\nimport Avatar from 'avataaars'\n\nimport Card from 'react-bootstrap/Card'\n\nimport Layout from \"../components/layout\"\n\nfunction topType() {\n    let variants = [\"NoHair\", \"Eyepatch\", \"Hat\", \"Hijab\", \"Turban\", \"WinterHat1\", \"WinterHat2\", \"WinterHat3\", \"WinterHat4\", \"LongHairBigHair\", \"LongHairBob\", \"LongHairBun\", \"LongHairCurly\", \"LongHairCurvy\", \"LongHairDreads\", \"LongHairFrida\", \"LongHairFro\", \"LongHairFroBand\", \"LongHairNotTooLong\", \"LongHairShavedSides\", \"LongHairMiaWallace\", \"LongHairStraight\", \"LongHairStraight2\", \"LongHairStraightStrand\", \"ShortHairDreads01\", \"ShortHairDreads02\", \"ShortHairFrizzle\", \"ShortHairShaggyMullet\", \"ShortHairShortCurly\", \"ShortHairShortFlat\", \"ShortHairShortRound\", \"ShortHairShortWaved\", \"ShortHairSides\", \"ShortHairTheCaesar\", \"ShortHairTheCaesarSidePart\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction clothType() {\n    let variants = [\"BlazerShirt\", \"BlazerSweater\", \"CollarSweater\", \"GraphicShirt\", \"Hoodie\", \"Overall\", \"ShirtCrewNeck\", \"ShirtScoopNeck\", \"ShirtVNeck\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction clotheColor() {\n    let variants = [\"Black\", \"Blue01\", \"Blue02\", \"Blue03\", \"Gray01\", \"Gray02\", \"Heather\", \"PastelBlue\", \"PastelGreen\", \"PastelOrange\", \"PastelRed\", \"PastelYellow\", \"Pink\", \"Red\", \"White\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nfunction hairColor() {\n    let variants = [\"Auburn\", \"Black\", \"Blonde\", \"BlondeGolden\", \"Brown\", \"BrownDark\", \"Platinum\", \"Red\"];\n    return variants[Math.floor(Math.random() * variants.length)];\n}\n\nlet currentDay = new Intl.DateTimeFormat(\"en\", {\n    weekday: \"short\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\"\n}).format(new Date()).replace(/[^a-zA-Z0-9]/g, \"_\");\n\nexport default function Currentwork() {\n    const { data: usersQuizes, loading, error } = useFirebaseNode('currentDay/' + currentDay + '/posts/');\n\n    if (!!loading || !usersQuizes) { return <Layout><div>...</div></Layout> }\n    if (!!error) { return <Layout>:-(</Layout> }\n\n    let data = Object.keys(usersQuizes).map(item => { return usersQuizes[item] });\n    console.log(data);\n\n    data.sort(function (a, b) {\n        var timeA = !!a?.timestamp ? a.timestamp : 0;\n        var timeB = !!b?.timestamp ? b.timestamp : 0;\n        if (timeA > timeB) {\n            return -1;\n        }\n        if (timeA < timeB) {\n            return 1;\n        }\n        return 0;\n    });\n\n    console.log(data);\n\n    let uniqueUsers = !!data ? [...new Set(data.map(item => item.user))] : []; // [ 'A', 'B']\n    console.log(uniqueUsers);\n    let usersProgress = uniqueUsers.map(user => {\n        return { user: user, doneTasks: [...new Set(data.filter(quiz => quiz.user === user).map(userquiz => userquiz.title))].length }\n    });\n    console.log(usersProgress);\n\n\n    const uniqueTitles = !!data ? [...new Set(data.map(item => item.title))] : []; // [ 'A', 'B']\n\n    return <Layout>\n        {uniqueTitles.map((title, titleIndex) =>\n            <Card key={titleIndex} className=\"m-3\">\n                <Card.Header>{title}</Card.Header>\n                <Card.Body>\n                    {data.filter(quiz => quiz.title === title).map((quizWithTitle, quizIndex) =>\n                        <span key={quizIndex}>\n                            {!!quizWithTitle?.avatarUrl ?\n                                <img\n                                    src={quizWithTitle.avatarUrl} alt=\"\"\n                                    className=\"m-3\"\n                                    data-toggle=\"tooltip\"\n                                    data-placement=\"bottom\"\n                                    title={!!quizWithTitle?.user ? quizWithTitle.user + ' Сегодня ' + usersProgress.filter(item => item.user === quizWithTitle.user)[0].doneTasks + ' задач' : ''}\n                                    style={{\n                                        verticalAlign: 'middle',\n                                        width: '60px',\n                                        height: '60px',\n                                        borderRadius: '50%',\n                                        filter: 'grayscale(100%)',\n                                        objectFit: 'cover'\n                                    }} />\n                                :\n                                <span data-toggle=\"tooltip\"\n                                    data-placement=\"bottom\"\n                                    title={!!quizWithTitle?.user ? quizWithTitle.user + ' Сегодня ' + usersProgress.filter(item => item.user === quizWithTitle.user)[0].doneTasks + ' задач' : ''}>\n                                    <Avatar\n                                        style={{ width: '60px', height: '60px' }}\n                                        avatarStyle='Circle'\n                                        topType={topType()}\n                                        accessoriesType='Prescription02'\n                                        hairColor={hairColor()}\n                                        facialHairType='Blank'\n                                        clotheType={clothType()}\n                                        clotheColor={clotheColor()}\n                                        eyeType='Happy'\n                                        eyebrowType='Default'\n                                        mouthType='Smile'\n                                        skinColor='Light'\n                                    />\n                                </span>\n                            }\n                        </span>)}\n                </Card.Body>\n            </Card>\n        )}\n    </Layout>\n}"],"sourceRoot":""}