{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-parser.js"],"names":["Prism","parser","languages","extend","pattern","lookbehind","inside","alias","insertBefore","greedy","keyword","variable","escape","punctuation","expression"],"mappings":"+EAAA,SAAWA,GACT,IAAIC,EAASD,EAAME,UAAUD,OAASD,EAAME,UAAUC,OAAO,SAAU,CACrE,QAAW,CACTC,QAAS,+GACTC,YAAY,GAEd,SAAY,CACVD,QAAS,4DACTC,YAAY,EACZC,OAAQ,CACN,YAAe,UAGnB,SAAY,CACVF,QAAS,iDACTC,YAAY,EACZC,OAAQ,CACN,QAAW,CACTF,QAAS,oBACTC,YAAY,GAEd,YAAe,UAGnB,OAAU,CACRD,QAAS,qCACTG,MAAO,WAET,YAAe,gBAEjBN,EAASD,EAAME,UAAUM,aAAa,SAAU,UAAW,CACzD,iBAAkB,CAChBJ,QAAS,UACTC,YAAY,EACZE,MAAO,WAET,WAAc,CAEZH,QAAS,uDACTK,QAAQ,EACRJ,YAAY,EACZC,OAAQ,CACN,OAAU,CACRF,QAAS,2CACTC,YAAY,GAEd,QAAWJ,EAAOS,QAClB,SAAYT,EAAOU,SACnB,SAAYV,EAAiB,SAC7B,QAAW,qBACX,OAAU,8CACV,OAAUA,EAAOW,OACjB,SAAY,iGACZ,YAAeX,EAAOY,gBAI5BZ,EAASD,EAAME,UAAUM,aAAa,SAAU,cAAe,CAC7D,WAAcP,EAAOa,WACrB,QAAWb,EAAOS,QAClB,SAAYT,EAAOU,SACnB,SAAYV,EAAiB,SAC7B,OAAUA,EAAOW,OACjB,qBAAsB,CACpBR,QAASH,EAAOY,YAChBN,MAAO,gBAERN,EAAY,IAAEK,OAAO,eAnE1B,CAoEGN","file":"276-efee70f8d3fa20b51c01.js","sourcesContent":["(function (Prism) {\n  var parser = Prism.languages.parser = Prism.languages.extend('markup', {\n    'keyword': {\n      pattern: /(^|[^^])(?:\\^(?:case|eval|for|if|switch|throw)\\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\\b)/,\n      lookbehind: true\n    },\n    'variable': {\n      pattern: /(^|[^^])\\B\\$(?:\\w+|(?=[.{]))(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\.|:+/\n      }\n    },\n    'function': {\n      pattern: /(^|[^^])\\B[@^]\\w+(?:(?:\\.|::?)\\w+)*(?:\\.|::?)?/,\n      lookbehind: true,\n      inside: {\n        'keyword': {\n          pattern: /(^@)(?:GET_|SET_)/,\n          lookbehind: true\n        },\n        'punctuation': /\\.|:+/\n      }\n    },\n    'escape': {\n      pattern: /\\^(?:[$^;@()\\[\\]{}\"':]|#[a-f\\d]*)/i,\n      alias: 'builtin'\n    },\n    'punctuation': /[\\[\\](){};]/\n  });\n  parser = Prism.languages.insertBefore('parser', 'keyword', {\n    'parser-comment': {\n      pattern: /(\\s)#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    'expression': {\n      // Allow for 3 levels of depth\n      pattern: /(^|[^^])\\((?:[^()]|\\((?:[^()]|\\((?:[^()])*\\))*\\))*\\)/,\n      greedy: true,\n      lookbehind: true,\n      inside: {\n        'string': {\n          pattern: /(^|[^^])([\"'])(?:(?!\\2)[^^]|\\^[\\s\\S])*\\2/,\n          lookbehind: true\n        },\n        'keyword': parser.keyword,\n        'variable': parser.variable,\n        'function': parser[\"function\"],\n        'boolean': /\\b(?:true|false)\\b/,\n        'number': /\\b(?:0x[a-f\\d]+|\\d+\\.?\\d*(?:e[+-]?\\d+)?)\\b/i,\n        'escape': parser.escape,\n        'operator': /[~+*\\/\\\\%]|!(?:\\|\\|?|=)?|&&?|\\|\\|?|==|<[<=]?|>[>=]?|-[fd]?|\\b(?:def|eq|ge|gt|in|is|le|lt|ne)\\b/,\n        'punctuation': parser.punctuation\n      }\n    }\n  });\n  parser = Prism.languages.insertBefore('inside', 'punctuation', {\n    'expression': parser.expression,\n    'keyword': parser.keyword,\n    'variable': parser.variable,\n    'function': parser[\"function\"],\n    'escape': parser.escape,\n    'parser-punctuation': {\n      pattern: parser.punctuation,\n      alias: 'punctuation'\n    }\n  }, parser['tag'].inside['attr-value']);\n})(Prism);"],"sourceRoot":""}