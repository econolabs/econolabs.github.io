{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/pages/myworkbook.js"],"names":["Header","siteTitle","className","style","margin","to","color","textDecoration","href","src","alt","verticalAlign","width","height","borderRadius","filter","objectFit","defaultProps","Layout","children","data","site","siteMetadata","title","maxWidth","padding","Date","getFullYear","author","MyWokBook","React","useState","setData","userEmail","useSelector","selectApplication","email","replace","avatarUrl","user","useEffect","firebase","database","ref","once","then","snapshot","userPosts","forEach","childSnapshot","childData","val","push","catch","err","console","log","uniqueThemes","Set","map","item","theme","Intl","DateTimeFormat","weekday","year","month","day","hour","minute","format","key","variant","quiz","xlArray","createProtoArray","content","id","source","quizString","answer","date","escapeHtml","type","striped","bordered","hover","column","columnIndex","alphabet","row","rowIndex"],"mappings":"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","file":"component---src-pages-myworkbook-js-87b747d0d02d9988a973.js","sourcesContent":["import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <nav className=\"navbar  navbar-light bg-light \"> {/* navbar-dark bg-primary */}\n\n    <h3 style={{ margin: 0 }}>\n      <Link to=\"/\" style={{ color: `gray`, textDecoration: `none`, }}>{siteTitle}</Link>\n    </h3>\n    <a className=\"navbar-brand\" href=\"https://vk.com/id151078439\">\n      <img\n        src=\"https://sun9-37.userapi.com/c317630/v317630439/76a0/Bz6QTfBog0I.jpg?ava=1\"\n        //  width=\"30\"\n        //  height=\"45\"\n        alt=\"\"\n        style={{\n          verticalAlign: 'middle',\n          width: '40px',\n          height: '40px',\n          borderRadius: '50%',\n          filter: 'grayscale(100%)',\n          objectFit: 'cover'\n        }} />\n    </a>\n  </nav>\n\n  // <header\n  //   style={{\n  //     background: `rebeccapurple`,\n  //     marginBottom: `1.45rem`,\n  //   }}\n  // >\n  //   <div\n  //     style={{\n  //       margin: `0 auto`,\n  //       maxWidth: 960,\n  //       padding: `1.45rem 1.0875rem`,\n  //     }}\n  //   >\n  //     <h1 style={{ margin: 0 }}>\n  //       <Link\n  //         to=\"/\"\n  //         style={{\n  //           color: `white`,\n  //           textDecoration: `none`,\n  //         }}\n  //       >\n  //         {siteTitle}\n  //       </Link>\n  //     </h1>\n  //   </div>\n  // </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          author\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 800,\n          padding: '2rem'\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          <span style={{color: 'darkgray'}}>\n          © {new Date().getFullYear()}, {\" \"}\n          <a href=\"https://vk.com/id151078439\" style={{color: 'darkgray'}}>{data.site.siteMetadata.author}</a>\n          </span>         \n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport firebase from \"gatsby-plugin-firebase\";\nimport { useSelector } from \"react-redux\";\n\nimport Layout from \"../components/layout\"\nimport {\n    selectApplication,\n} from \"../features/application/applicationSlice\";\n\nimport { alphabet } from \"../features/spreadsheet/AlphabetRow\";\nimport { createProtoArray } from \"../features/spreadsheet/spreadsheetSlice\";\n\nimport Alert from 'react-bootstrap/Alert'\nimport Table from 'react-bootstrap/Table'\n\n\n\nexport default function MyWokBook() {\n    const [data, setData] = React.useState(null);\n    const email = useSelector(selectApplication).email;\n    let userEmail = email.replace(/[^a-zA-Z0-9]/g, \"_\");\n    const avatarUrl = useSelector(selectApplication).avatarUrl;\n    const user = useSelector(selectApplication).user;\n\n    React.useEffect(() => {\n        firebase\n            .database()\n            .ref('usersCraft/' + userEmail + '/posts/')\n            .once(\"value\")\n            .then(snapshot => {\n                let userPosts = [];\n                snapshot.forEach(function (childSnapshot) {\n                    // key will be \"ada\" the first time and \"alan\" the second time\n                    //     var key = childSnapshot.key;\n                    // childData will be the actual contents of the child\n                    let childData = childSnapshot.val();\n                    userPosts.push(childData);\n                });\n                setData(userPosts);\n                //           console.log(userPosts);\n            })\n            .catch(err => console.log(err));\n\n    }, [])\n\n    const uniqueThemes = !!data ? [...new Set(data.map(item => item.theme))] : []; // [ 'A', 'B']\n\n    return <Layout>\n        <div className=\"media border p-3 mb-5\">\n            <img src={avatarUrl} alt=\"\"\n                className=\"m-3\"\n                style={{\n                    verticalAlign: 'middle',\n                    width: '60px',\n                    height: '60px',\n                    borderRadius: '50%',\n                    filter: 'grayscale(100%)',\n                    objectFit: 'cover'\n                }} />\n            <div className=\"media-body\">\n                <h4>{user} <small><i>{new Intl.DateTimeFormat(\"ru\", {\n                    weekday: \"short\",\n                    year: \"numeric\",\n                    month: \"short\",\n                    day: \"numeric\",\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                }).format(new Date())}</i></small></h4>\n                <p>Рабочая тетрадь</p>\n            </div>\n        </div>\n        <div>{!!uniqueThemes && uniqueThemes.map(theme =>\n            <div key={theme}>\n                <Alert variant='primary'>\n                    {theme}\n                </Alert>\n                {data.filter(quiz => quiz.theme === theme).map(quiz => {\n                    let xlArray = createProtoArray(quiz.content, 0, 0);\n                    // let clearedArray = [];\n                    // array.map(row => {\n                    //     if (row.filter(item => item !== \"\").length > 0) { clearedArray.push(row) }\n                    // })\n                    return <div key={quiz.id} >\n                        <Alert variant='secondary' className=\"mt-3\">{quiz.title}</Alert>\n                        <ReactMarkdown source={quiz.quizString + `<br><span>Ответ: ${quiz.answer}</span><span class=\"ml-5\">Дата/время: ${quiz.date}</span>`} escapeHtml={false} />\n                        {quiz.type === 'spreadsheet' ?\n                            <Table striped bordered hover>\n                                <thead>\n                                    <tr>\n                                        <th>{\" \"}</th>\n                                        {xlArray[0].map((column, columnIndex) => <th key={columnIndex} className=\"text-center\">{alphabet[columnIndex]}</th>)}\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {xlArray.map((row, rowIndex) =>\n                                        <tr key={rowIndex} >\n                                            <td> <small className=\"ml-1\">{rowIndex + 1}</small></td>\n                                            {row.map((column, columnIndex) => <td key={rowIndex + columnIndex}><small>{row[columnIndex]}</small></td>)}\n                                        </tr>\n                                    )}\n                                </tbody>\n                            </Table>\n                            : null}\n                    </div>\n                })}\n            </div>\n        )}\n        </div>\n    </Layout>\n}"],"sourceRoot":""}